<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." name="Limelight buildFrontEnd_CopyToTomcat" default="built-copy-front-end">

	<!--  Build the 'front end' and copy to a Tomcat Deploy  -->

	<!--  
			Targets to build Javascript Only for a Single Page.  The Handlebars templates are NOT rebuilt.  The JSP are NOT copied.
	
	 		Search for:  <target name="js_only_build_copy
	 		
	 		
	 		Run ant for specific target using:  ant -f <filename> <target>
	-->

	
	<!-- !!  ONLY used for building for specific pages where run webpack here -->
	<!-- Webpack directive, mode development.  Same as used when build all of front end in build.gradle when build from this ant script -->
	<property name="webpack_param_mode_value" value="--mode=development" />
	
	<!--
	<property environment="env" />
	<property name="gradle.wrapper.executable" location="${env.GRADLE_HOME}/bin/gradle" />
	
	<echo>env:${env}</echo>
	<echo>env.GRADLE_HOME:${env.GRADLE_HOME}</echo>
	-->

	<!--  Runs Gradle (gradlew or gradlew.bat) -->

	 <!-- Set program to run for Windows, else Non-Windows (Linux/Mac) -->
	    <condition property="executableToRun_Build_FrontEnd_CopyToComcat" value="./gradlew.bat" else="./gradlew">
	        <os family="windows"/>
	    </condition>
	
	
	
	<!-- When build specific 'entry' for specific page, build using webpack -->

	 <!-- Set program to run for Windows, else Non-Windows (Linux/Mac) -->
	    <condition property="webpack_executable" value="./node_modules/webpack/bin/webpack.js" else="./node_modules/.bin/webpack">
	        <os family="windows"/>
	    </condition>
	
	
	
	<property name="config_file" value="ant_buildFrontEnd_CopyToTomcat.settings.properties" />
	
	<property name="config_file_with_path" 
		value="${config_file}"/>
		
	<fail message="ERROR: '${config_file}' file not found, check the path. filename with path: ${config_file_with_path}">
		<condition>
		    <not>
		    	<available file="${config_file_with_path}" />
		    </not>
		</condition>
	</fail>
	
	<echo>config_file_with_path: ${config_file_with_path}</echo>
	
	<!-- This does not fail if the file is not found -->
	<property file="${config_file_with_path}" />
	
	<echo>tomcat.webapps.root: ${tomcat.webapps.root}</echo>
	<echo>limelight.context: ${limelight.context}</echo>

	<property name="tomcat.limelight.webapp.root" value="${tomcat.webapps.root}${file.separator}${limelight.context}" />
	
	
	<property name="tomcat.static" value="${tomcat.limelight.webapp.root}${file.separator}static" />
	<property name="tomcat.jsp" value="${tomcat.limelight.webapp.root}${file.separator}WEB-INF${file.separator}jsp" />
	
	
	<!-- MAIN / DEFAULT Target  -->
	
	<target name="built-copy-front-end" description="">

		<echo>Executing gradle using executable: ${executableToRun_Build_FrontEnd_CopyToComcat}</echo>
		
		<exec executable="${executableToRun_Build_FrontEnd_CopyToComcat}" dir="." failonerror="true" 
		    resolveexecutable="true" >
		    <!--
		    resolveexecutable:
		    When this attribute is true, the name of the executable is resolved firstly against the project basedir 
		    and if that does not exist, against the execution directory if specified. 
		    On Unix systems, if you only want to allow execution of 
		    commands in the user's path, set this to false. since Ant 1.6
		    -->
			<arg value="frontEndBuild_ForDevelopment" />
			<!--   <arg value="XXXX" /> -->
		</exec>
		
		
	      <delete dir="${tomcat.static}"/>
	      <mkdir  dir="${tomcat.static}"/>
		
	      <delete dir="${tomcat.jsp}"/>
	      <mkdir  dir="${tomcat.jsp}"/>
		
		<copy todir="${tomcat.static}" >
  		    <fileset dir="..${file.separator}src${file.separator}main${file.separator}webapp${file.separator}static" />
		</copy>			 
				
		<copy todir="${tomcat.jsp}" >
  		    <fileset dir="..${file.separator}src${file.separator}main${file.separator}webapp${file.separator}WEB-INF${file.separator}jsp" />
		</copy>			 

	</target>
	
	
	<!-- =======================  -->

	<!--  Targets to build Javascript Only for a Single Page -->



	<!--     Admin Manage Imports Pipeline Execution Page Javascript Only Build Target  -->

	<target name="js_only_build_copy_Project_Page_ProjectOwnerOnly" description="">

		<echo>Executing webpack using executable: ${webpack_executable}</echo>

		<exec executable="${webpack_executable}" dir="." failonerror="true"
			  resolveexecutable="true" >
			<!--
            resolveexecutable:
            When this attribute is true, the name of the executable is resolved firstly against the project basedir
            and if that does not exist, against the execution directory if specified.
            On Unix systems, if you only want to allow execution of
            commands in the user's path, set this to false. since Ant 1.6
            -->

			<!-- Webpack directive  -->
			<arg value="${webpack_param_mode_value}" />

			<!-- env build_entry=<Object key from 'entry' object in webpack.config.js>".  Space delimit to separate 'entry'.  See code in webpack.config.js -->
			<arg value="--env" />
			<arg value="build_entry=data_pages/projectViewPage_ProjectOwner_W_User" />
			<!--   <arg value="XXXX" /> -->
		</exec>

		<copy todir="${tomcat.static}${file.separator}js_generated_bundles" >
			<fileset dir="webpack_build_output${file.separator}js_generated_bundles" />
		</copy>

	</target>



	<!--     Admin Manage Imports Pipeline Execution Page Javascript Only Build Target  -->

	<target name="js_only_build_copy_Admin_Manage_Imports_Pipeline_Execution_Page" description="">

		<echo>Executing webpack using executable: ${webpack_executable}</echo>

		<exec executable="${webpack_executable}" dir="." failonerror="true"
			  resolveexecutable="true" >
			<!--
            resolveexecutable:
            When this attribute is true, the name of the executable is resolved firstly against the project basedir
            and if that does not exist, against the execution directory if specified.
            On Unix systems, if you only want to allow execution of
            commands in the user's path, set this to false. since Ant 1.6
            -->

			<!-- Webpack directive  -->
			<arg value="${webpack_param_mode_value}" />

			<!-- env build_entry=<Object key from 'entry' object in webpack.config.js>".  Space delimit to separate 'entry'.  See code in webpack.config.js -->
			<arg value="--env" />
			<arg value="build_entry=webapp_admin/manage_ImporterPipelineExecution_Page_Root" />
			<!--   <arg value="XXXX" /> -->
		</exec>

		<copy todir="${tomcat.static}${file.separator}js_generated_bundles" >
			<fileset dir="webpack_build_output${file.separator}js_generated_bundles" />
		</copy>

	</target>



	<!--     Project Organize Searches Page Javascript Only Build Target  -->

	<target name="js_only_build_copy_Project_OrganizeSearches_Page" description="">

		<echo>Executing webpack using executable: ${webpack_executable}</echo>

		<exec executable="${webpack_executable}" dir="." failonerror="true"
			  resolveexecutable="true" >
			<!--
            resolveexecutable:
            When this attribute is true, the name of the executable is resolved firstly against the project basedir
            and if that does not exist, against the execution directory if specified.
            On Unix systems, if you only want to allow execution of
            commands in the user's path, set this to false. since Ant 1.6
            -->

			<!-- Webpack directive  -->
			<arg value="${webpack_param_mode_value}" />

			<!-- env build_entry=<Object key from 'entry' object in webpack.config.js>".  Space delimit to separate 'entry'.  See code in webpack.config.js -->
			<arg value="--env" />
			<arg value="build_entry=data_pages/project_OrganizeSearches_Page" />
			<!--   <arg value="XXXX" /> -->
		</exec>

		<copy todir="${tomcat.static}${file.separator}js_generated_bundles" >
			<fileset dir="webpack_build_output${file.separator}js_generated_bundles" />
		</copy>

	</target>


	<!--     QC Page Javascript Only Build Target  -->
	
	<target name="js_only_build_copy_QC_Page" description="">

		<echo>Executing webpack using executable: ${webpack_executable}</echo>
		
		<exec executable="${webpack_executable}" dir="." failonerror="true" 
		    resolveexecutable="true" >
		    <!--
		    resolveexecutable:
		    When this attribute is true, the name of the executable is resolved firstly against the project basedir 
		    and if that does not exist, against the execution directory if specified. 
		    On Unix systems, if you only want to allow execution of 
		    commands in the user's path, set this to false. since Ant 1.6
		    -->

			<!-- Webpack directive  -->
			<arg value="${webpack_param_mode_value}" />

			<!-- env build_entry=<Object key from 'entry' object in webpack.config.js>".  Space delimit to separate 'entry'.  See code in webpack.config.js -->
			<arg value="--env" />
			<arg value="build_entry=data_pages/qcViewPage_RootLaunch_LoggedInUsers data_pages/qcViewPage_RootLaunch_PublicUser" />
			<!--   <arg value="XXXX" /> -->
		</exec>
		
		<copy todir="${tomcat.static}${file.separator}js_generated_bundles" >
  		    <fileset dir="webpack_build_output${file.separator}js_generated_bundles" />
		</copy>			 
				
	</target>

	<!--     Peptide Page (NOT Experiment Page) Javascript Only Build Target  -->
	
	<target name="js_only_build_copy_Peptide_Page" description="">

		<echo>Executing webpack using executable: ${webpack_executable}</echo>
		
		<exec executable="${webpack_executable}" dir="." failonerror="true" 
		    resolveexecutable="true" >
		    <!--
		    resolveexecutable:
		    When this attribute is true, the name of the executable is resolved firstly against the project basedir 
		    and if that does not exist, against the execution directory if specified. 
		    On Unix systems, if you only want to allow execution of 
		    commands in the user's path, set this to false. since Ant 1.6
		    -->

			<!-- Webpack directive  -->
			<arg value="${webpack_param_mode_value}" />

			<!-- env build_entry=<Object key from 'entry' object in webpack.config.js>".  Space delimit to separate 'entry'.  See code in webpack.config.js -->
			<arg value="--env" />
			<arg value="build_entry=data_pages/peptideViewPage_RootLaunch_LoggedInUsers data_pages/peptideViewPage_RootLaunch_PublicUser" />
			<!--   <arg value="XXXX" /> -->
		</exec>
		
		<copy todir="${tomcat.static}${file.separator}js_generated_bundles" >
  		    <fileset dir="webpack_build_output${file.separator}js_generated_bundles" />
		</copy>			 
				
	</target>

	<!--     Protein Page (NOT Experiment Page) Javascript Only Build Target  -->
	
	<target name="js_only_build_copy_Protein_Page" description="">

		<echo>Executing webpack using executable: ${webpack_executable}</echo>
		
		<exec executable="${webpack_executable}" dir="." failonerror="true" 
		    resolveexecutable="true" >
		    <!--
		    resolveexecutable:
		    When this attribute is true, the name of the executable is resolved firstly against the project basedir 
		    and if that does not exist, against the execution directory if specified. 
		    On Unix systems, if you only want to allow execution of 
		    commands in the user's path, set this to false. since Ant 1.6
		    -->

			<!-- Webpack directive  -->
			<arg value="${webpack_param_mode_value}" />

			<!-- env build_entry=<Object key from 'entry' object in webpack.config.js>".  Space delimit to separate 'entry'.  See code in webpack.config.js -->
			<arg value="--env" />
			<arg value="build_entry=data_pages/proteinViewPage_RootLaunch_LoggedInUsers data_pages/proteinViewPage_RootLaunch_PublicUser" />
			<!--   <arg value="XXXX" /> -->
		</exec>
		
		<copy todir="${tomcat.static}${file.separator}js_generated_bundles" >
  		    <fileset dir="webpack_build_output${file.separator}js_generated_bundles" />
		</copy>			 
				
	</target>

	<!--     Mod Page Javascript Only Build Target  -->
	
	<target name="js_only_build_copy_Mod_Page" description="">

		<echo>Executing webpack using executable: ${webpack_executable}</echo>
		
		<exec executable="${webpack_executable}" dir="." failonerror="true" 
		    resolveexecutable="true" >
		    <!--
		    resolveexecutable:
		    When this attribute is true, the name of the executable is resolved firstly against the project basedir 
		    and if that does not exist, against the execution directory if specified. 
		    On Unix systems, if you only want to allow execution of 
		    commands in the user's path, set this to false. since Ant 1.6
		    -->

			<!-- Webpack directive  -->
			<arg value="${webpack_param_mode_value}" />

			<!-- env build_entry=<Object key from 'entry' object in webpack.config.js>".  Space delimit to separate 'entry'.  See code in webpack.config.js -->
			<arg value="--env" />
			<arg value="build_entry=data_pages/modViewPage_RootLaunch_LoggedInUsers data_pages/modViewPage_RootLaunch_PublicUser" />
			<!--   <arg value="XXXX" /> -->
		</exec>
		
		<copy todir="${tomcat.static}${file.separator}js_generated_bundles" >
  		    <fileset dir="webpack_build_output${file.separator}js_generated_bundles" />
		</copy>			 
				
	</target>

	<!--     Feature Detection View Page Javascript Only Build Target  -->

	<target name="js_only_build_copy_FeatureDetectionView_Page" description="">

		<echo>Executing webpack using executable: ${webpack_executable}</echo>

		<exec executable="${webpack_executable}" dir="." failonerror="true"
			  resolveexecutable="true" >
			<!--
            resolveexecutable:
            When this attribute is true, the name of the executable is resolved firstly against the project basedir
            and if that does not exist, against the execution directory if specified.
            On Unix systems, if you only want to allow execution of
            commands in the user's path, set this to false. since Ant 1.6
            -->

			<!-- Webpack directive  -->
			<arg value="${webpack_param_mode_value}" />

			<!-- env build_entry=<Object key from 'entry' object in webpack.config.js>".  Space delimit to separate 'entry'.  See code in webpack.config.js -->
			<arg value="--env" />
			<arg value="build_entry=data_pages/featureDetection_ViewPage_RootLaunch_LoggedInUsers data_pages/featureDetection_ViewPage_RootLaunch_PublicUser" />
			<!--   <arg value="XXXX" /> -->
		</exec>

		<copy todir="${tomcat.static}${file.separator}js_generated_bundles" >
			<fileset dir="webpack_build_output${file.separator}js_generated_bundles" />
		</copy>

	</target>

	<!--     Scan File Browser Page Javascript Only Build Target  -->

	<target name="js_only_build_copy_ScanFileBrowser_Page" description="">

		<echo>Executing webpack using executable: ${webpack_executable}</echo>

		<exec executable="${webpack_executable}" dir="." failonerror="true"
			  resolveexecutable="true" >
			<!--
            resolveexecutable:
            When this attribute is true, the name of the executable is resolved firstly against the project basedir
            and if that does not exist, against the execution directory if specified.
            On Unix systems, if you only want to allow execution of
            commands in the user's path, set this to false. since Ant 1.6
            -->

			<!-- Webpack directive  -->
			<arg value="${webpack_param_mode_value}" />

			<!-- env build_entry=<Object key from 'entry' object in webpack.config.js>".  Space delimit to separate 'entry'.  See code in webpack.config.js -->
			<arg value="--env" />
			<arg value="build_entry=data_pages/scanFileBrowserViewPage_RootLaunch_LoggedInUsers data_pages/scanFileBrowserViewPage_RootLaunch_PublicUser" />
			<!--   <arg value="XXXX" /> -->
		</exec>

		<copy todir="${tomcat.static}${file.separator}js_generated_bundles" >
			<fileset dir="webpack_build_output${file.separator}js_generated_bundles" />
		</copy>

	</target>

</project>
