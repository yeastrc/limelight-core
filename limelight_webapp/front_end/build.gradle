/*
 * Build Front End of limelight web app
 *
 	Builds Front End and then copies results for inclusion in main webapp build under:
 	    ../src/main/webapp/static/js_generated_bundles
	    ../src/main/webapp/static/css_generated
	    
    Task executed from Gradle file in parent directory used to build WAR file for web app:  'frontEndBuild'
 	
 	Default task:

		defaultTasks 'frontEndBuild_ForDevelopment'
 
 */
 
//  !!! Execution starts at one of the tasks at the bottom of this file,

//      except for when task 'clean' is executed from build all ant script at project/repo root.

 
 //  New way to import gradle plugin for node:  per https://plugins.gradle.org/plugin/com.moowork.node

/* 
 plugins {
  id "com.moowork.node" version "1.2.0"
} 
 */
 
// import com.moowork.gradle.node.task.NodeTask

buildscript {
    repositories {
        mavenCentral()
         
      maven {
     	 url "https://plugins.gradle.org/m2/"
    	}
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

apply plugin: "com.moowork.node"


apply plugin: 'eclipse'
// apply plugin: 'idea'



repositories {
    mavenCentral()
}

dependencies {

}

//  !!! Execution starts at one of the tasks at the bottom of this file,

//      except for when task 'clean' is executed from build all ant script at project/repo root.



// 'defaultTasks': Ignored when build webapp .war file in parent directory since
// 					task 'frontEndBuild' is specifically run from the build.gradle in the parent directory 

defaultTasks 'frontEndBuild_ForDevelopment'  ///  Task run when no task specified when gradle run on command line



/*
 * Clean up, remove output directories.  Removes some that are not deleted in task 'delete_outputDirs'
 * working directory: The directory this build.gradle file is in
 * 
 * !!!!  This task is only executed from build all ant script at project/repo root. !!!!!
 */
task clean(type: Delete) {
  doFirst {	
  	println("clean::doFirst called.  Deleting build output directories, including 'handlebars_templates_precompiled'")
  	  
	   delete 'handlebars_templates_precompiled'
	   delete 'webpack_build_output'
	   delete '../src/main/webapp/static/js_generated_bundles'
	   delete '../src/main/webapp/static/css_generated'
   }
}


/*
 * working directory: The directory this build.gradle file is in
 */
task delete_outputDirs(type: Delete) {
  doFirst {	
  	println("delete_outputDirs::doFirst called.  Deleting most build output directories, except 'handlebars_templates_precompiled'")
  	  
     //  No longer delete since added build avoidance input dir and output file
	   // delete 'handlebars_templates_precompiled'

	   delete 'webpack_build_output'
	   delete '../src/main/webapp/static/js_generated_bundles'
	   delete '../src/main/webapp/static/css_generated'
   }
}

//  Create all createHandlebarsOutputDirs

task createHandlebarsOutputDirs { 
  doFirst {	
  	  println("createHandlebarsOutputDirs::doFirst called.  Creating dir 'handlebars_templates_precompiled' and it's subdirs")
  	  
  	  String rootDir = "handlebars_templates_precompiled/"
  	  
  	  String dirToCreate = ""
  	  boolean mkdirSuccess = false;
  	  
  	  dirToCreate = rootDir
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "protein_page"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
      dirToCreate = rootDir + "common"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page__project_info_section_all_users_interaction"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page__project_info_section_logged_in_users_interaction"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "project_page_searches_section_researcher_user_interaction"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()

  	  dirToCreate = rootDir + "project_list"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "user_account_create_account"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "user_account_login_forgot_password"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "user_invite_processing"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
  	  dirToCreate = rootDir + "admin_user_management"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()

  	  dirToCreate = rootDir + "dummy_template"
  	  mkdirSuccess = project.file( dirToCreate ).mkdirs()
  	  
	}
}

//  Handlebars Precompile for input handlebars_templates/common
task handlebarsPrecompile_common(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/common"
  def precompile_Output_File = "handlebars_templates_precompiled/common/common_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page__project_info_section_all_users_interaction

task handlebarsPrecompile_project_page__project_info_section_all_users_interaction(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page__project_info_section_all_users_interaction"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page__project_info_section_all_users_interaction/project_page__project_info_section_all_users_interaction_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page__project_info_section_logged_in_users_interaction

task handlebarsPrecompile_project_page__project_info_section_logged_in_users_interaction(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page__project_info_section_logged_in_users_interaction"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page__project_info_section_logged_in_users_interaction/project_page__project_info_section_logged_in_users_interaction_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_page_searches_section_researcher_user_interaction

task handlebarsPrecompile_project_page_searches_section_researcher_user_interaction(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_page_searches_section_researcher_user_interaction"
  def precompile_Output_File = "handlebars_templates_precompiled/project_page_searches_section_researcher_user_interaction/project_page_searches_section_researcher_user_interaction_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/project_list

task handlebarsPrecompile_project_list(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/project_list"
  def precompile_Output_File = "handlebars_templates_precompiled/project_list/project_list_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/user_account_create_account

task handlebarsPrecompile_user_account_create_account(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/user_account_create_account"
  def precompile_Output_File = "handlebars_templates_precompiled/user_account_create_account/user_account_create_account_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/user_account_login_forgot_password

task handlebarsPrecompile_user_account_login_forgot_password(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/user_account_login_forgot_password"
  def precompile_Output_File = "handlebars_templates_precompiled/user_account_login_forgot_password/user_account_login_forgot_password_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/user_invite_processing

task handlebarsPrecompile_user_invite_processing(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/user_invite_processing"
  def precompile_Output_File = "handlebars_templates_precompiled/user_invite_processing/user_invite_processing_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/admin_user_management

task handlebarsPrecompile_admin_user_management(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/admin_user_management"
  def precompile_Output_File = "handlebars_templates_precompiled/admin_user_management/admin_user_management_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}

//  Handlebars Precompile for input handlebars_templates/dummy_template

task handlebarsPrecompile_dummy_template(type: NodeTask) {

  def precompile_Input_Directory = "handlebars_templates/dummy_template"
  def precompile_Output_File = "handlebars_templates_precompiled/dummy_template/dummy_template_template-bundle.js"
  
  // Gradle Build Avoidance information.  Must specify correct inputs and outputs.
  inputs.dir( precompile_Input_Directory )
  outputs.file( precompile_Output_File )

  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/handlebars/bin/handlebars')
  } else {
    script = project.file('node_modules/.bin/handlebars')
  }
  args = [ '--amd' , // parameters must be before file list
  '--min',
  '-f', precompile_Output_File,
   precompile_Input_Directory
   ]
}


/*
	Run Webpack in Mode Development to include React Library in Development Mode.  JS always NEVER Minified due to settings in webpack.config file 

	Run Webpack to build front end JS/TS and CSS
	
	Change so dev runs  'npm install' separately since it takes so long
*/
task runWebpack_DevelopmentMode(type: NodeTask ) { //  , dependsOn: 'npmInstall') {
  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/webpack/bin/webpack.js')
  } else {
    script = project.file('node_modules/.bin/webpack')
  }
    //  '--max_old_space_size=4096': Increase max memory of Node process running webpack.  Example with multiple values: environment = [ 'NODE_ENV': 'development', BASE_URL: '3000' ]
  environment = [ 'NODE_OPTIONS': '--max_old_space_size=4096' ]

  //  specify mode development, defaults to production
  args = [ '--mode=development' ] // --mode=development does no minification, also React Library includes more code and validation
}

/*
	Run Webpack in Mode Production to !! NOT !! include React Library in Development Mode.  JS always NEVER Minified due to settings in webpack.config file 

	Run Webpack to build front end JS/TS and CSS
	
	Change so dev runs  'npm install' separately since it takes so long
*/
task runWebpack_ProductionMode(type: NodeTask ) { //  , dependsOn: 'npmInstall') {
  def osName = System.getProperty("os.name").toLowerCase();
  if (osName.contains("windows")) {
    script = project.file('node_modules/webpack/bin/webpack.js')
  } else {
    script = project.file('node_modules/.bin/webpack')
  }
    //  '--max_old_space_size=4096': Increase max memory of Node process running webpack.  Example with multiple values: environment = [ 'NODE_ENV': 'development', BASE_URL: '3000' ]
  environment = [ 'NODE_OPTIONS': '--max_old_space_size=4096' ]

  //  specify mode development, defaults to production
  args = [ '--mode=production' ] // --mode=development does no minification
}

/*
	does a copy into where the Gradle WAR processing expects it
*/
task copyFrontEndJS(type: Sync) {
    from "webpack_build_output/js_generated_bundles"
    into "../src/main/webapp/static/js_generated_bundles"
}

task copyFrontEndCSS(type: Sync) {
    from "webpack_build_output/css_generated"
    into "../src/main/webapp/static/css_generated"
}



// task copyFrontEnd(type: Sync) { // , dependsOn: 'webpack') {
//    from "FrontEnd/webapp_prebuild"
//    into "src/main/webapp"
// }

// processResources.dependsOn 'copyFrontEnd' //  'webpack'

// clean.delete << file('node_modules')
// clean.delete << file('src/main/webapp/dist')



ext.frontEndBuild_Main_Before_WebPack_Fcn = { fakeParam ->

	println("frontEndBuild_Main_Before_WebPack_Fcn called.")

   def tasks = [ 
     'delete_outputDirs', 
     
     'createHandlebarsOutputDirs', 
     
     'handlebarsPrecompile_common',
     'handlebarsPrecompile_project_page__project_info_section_all_users_interaction',
     'handlebarsPrecompile_project_page__project_info_section_logged_in_users_interaction',
     'handlebarsPrecompile_project_page_searches_section_researcher_user_interaction',
     'handlebarsPrecompile_project_list',
     'handlebarsPrecompile_user_account_create_account',
     'handlebarsPrecompile_user_account_login_forgot_password',
     'handlebarsPrecompile_user_invite_processing',
     'handlebarsPrecompile_admin_user_management',
     'handlebarsPrecompile_dummy_template',
   ]
   
   return tasks;
}

ext.frontEndBuild_Main_Add_After_WebPack_Fcn = { tasksInput ->

	println("frontEndBuild_Main_Add_After_WebPack_Fcn called.")

   def tasksOutput = tasksInput

   tasksOutput += 'copyFrontEndJS'
   tasksOutput += 'copyFrontEndCSS'
   
   return tasksOutput
}


/*
 * !!!  Start Exec Here when run ANT script ant_build_War_CopyToTomcat.xml in parent dir to build WAR file
 */
task frontEndBuild(type: GradleBuild) {
	println("frontEndBuild_ForDevelopment. main start" )
	
	def tasksTemp = frontEndBuild_Main_Before_WebPack_Fcn( 1 )
	
	tasksTemp += 'runWebpack_ProductionMode'
	
	tasksTemp = frontEndBuild_Main_Add_After_WebPack_Fcn( tasksTemp )
	
	tasks = tasksTemp
}



/*
 * !!!  Start Exec Here when run ANT script ant_buildFrontEnd_CopyToTomcat.xml to build only front end and copy to Tomcat
 */
task frontEndBuild_ForDevelopment(type: GradleBuild) { 

	println("frontEndBuild_ForDevelopment. main start" )

	def tasksTemp = frontEndBuild_Main_Before_WebPack_Fcn( 1 )
	
	tasksTemp += 'runWebpack_DevelopmentMode'
	
	tasksTemp = frontEndBuild_Main_Add_After_WebPack_Fcn( tasksTemp )
	
	tasks = tasksTemp
}
