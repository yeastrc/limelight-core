/**
 * scanFileToSearchesPage_Display_MainContent_Component.tsx
 * 
 * Scan File to Searches Page Main Content:
 * 
 * Main Content of ScanFileToSearchesView Page
 * 
 */

import React from 'react'

import {reportWebErrorToServer} from 'page_js/common_all_pages/reportWebErrorToServer';

import {DataPageStateManager} from 'page_js/data_pages/data_pages_common/dataPageStateManager';
import {DataPages_LoggedInUser_CommonObjectsFactory} from 'page_js/data_pages/data_pages_common/dataPages_LoggedInUser_CommonObjectsFactory';

import {
    SaveView_Create_Component_React_Result,
    SaveView_Create_Component_React_Type
} from 'page_js/data_pages/saveView_React/saveView_Create_Component_React_FunctionTemplate'

import {SharePage_Component} from 'page_js/data_pages/sharePage_React/sharePage_Component_React';

import {
    modificationMass_CommonRounding_ReturnNumber,
    modificationMass_CommonRounding_ReturnString
} from 'page_js/data_pages/modification_mass_common/modification_mass_rounding';

import {PeptideSequence_UserSelections_StateObject} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/peptide_sequence_selected/js/peptideSequence_UserSelections_StateObject';
import {PeptideSequence_UserSelections_ComponentData} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/peptide_sequence_selected/js/peptideSequence_UserSelections_ComponentData';

import {ModificationMass_UserSelections_StateObject} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/modification_mass_user_selections/js/modificationMass_UserSelections_StateObject';
import {ModificationMass_UserSelections_ComponentData} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/modification_mass_user_selections/js/modificationMass_UserSelections_ComponentData';

import {ReporterIonMass_UserSelections_ComponentData} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/reporter_ions_user_selections/js/reporterIonMass_UserSelections_BuildData_ForReactComponent';
import {ReporterIonMass_UserSelections_StateObject} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/reporter_ions_user_selections/js/reporterIonMass_UserSelections_StateObject';

import {ModificationMass_UserSelections_Root} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/modification_mass_user_selections/jsx/modificationMass_UserSelections_Root';

import {ReporterIonMass_UserSelections} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/reporter_ions_user_selections/jsx/reporterIonMass_UserSelections';

import {PeptideSequence_UserSelections} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/peptide_sequence_selected/jsx/peptideSequence_UserSelections';


import {
    GetReportedPeptideIdsForDisplay_AllProjectSearchIds_Class,
    Peptide__single_protein_getReportedPeptideIds_From_SelectionCriteria_AllProjectSearchIds
} from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/reported_peptide_ids_for_display/peptide__single_protein_getReportedPeptideIds_From_SelectionCriteria_AllProjectSearchIds'



import {
    SearchDetailsAndFilterBlock_MainPage_Root,
    SearchDetailsAndFilterBlock_MainPage_Root_Props_PropValue
} from "page_js/data_pages/search_details_block__project_search_id_based/jsx/searchDetailsAndFilterBlock_MainPage_Root";
import {SearchDetailsAndOtherFiltersOuterBlock_Layout} from "page_js/data_pages/search_details_and_other_filters_outer_block__project_search_id_based/jsx/searchDetailsAndOtherFiltersOuterBlock_Layout";
import {ModificationMass_UserSelections_DisplayMassSelectionOverlay} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/modification_mass_user_selections/js/modificationMass_UserSelections_DisplayMassSelectionOverlay";
import {GeneratedPeptideContents_UserSelections_StateObject} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/generated_peptide_contents__user_controls/js/generatedPeptideContents_UserSelections_StateObject";
import {GeneratedPeptideContents_UserSelections_Root_Component} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/generated_peptide_contents__user_controls/jsx/generatedPeptideContents_UserSelections_Root_Component";
import {SearchDataLookupParameters_Root} from "page_js/data_pages/data_pages__common_data_classes/searchDataLookupParameters";
import {PeptideUnique_UserSelection} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/peptide_unique_user_filter_selection/jsx/peptideUnique_UserSelection";
import {PeptideUnique_UserSelection_ComponentData} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/peptide_unique_user_filter_selection/js/peptideUnique_UserSelection_ComponentData";
import {PeptideUnique_UserSelection_StateObject} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/peptide_unique_user_filter_selection/js/peptideUnique_UserSelection_StateObject";
import {peptideUnique_UserSelection_BuildData_ForReactComponent} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/peptide_unique_user_filter_selection/js/peptideUnique_UserSelection_BuildData_ForReactComponent";
import {
    SearchSubGroup_In_SearchDetailsAndFilter_Component_DisplayData,
    SearchSubGroup_In_SingleProtein_FilterOn_Block_Root_Component
} from "page_js/data_pages/search_sub_group/search_sub_group_in_search_details_outer_block/jsx/searchSubGroup_In_SearchDetailsOuterBlock";
import {SearchSubGroup_CentralStateManagerObjectClass} from "page_js/data_pages/search_sub_group/search_sub_group_in_search_details_outer_block/js/searchSubGroup_CentralStateManagerObjectClass";
import {SearchDetailsBlockDataMgmtProcessing} from "page_js/data_pages/search_details_block__project_search_id_based/js/searchDetailsBlockDataMgmtProcessing";
import {searchSubGroup_Get_Selected_SearchSubGroupIds} from "page_js/data_pages/search_sub_group/js/searchSubGroup_Get_Selected_SearchSubGroupIds";
import {
    Get_SetDefaultView_Component_React_Type,
    SetDefaultView_Component_React_Params
} from "page_js/data_pages/setDefaultView_React/setDefaultView_Create_Component_React_FunctionTemplate";
import {Spinner_Limelight_Component} from "page_js/common_all_pages/spinner_ReactComponent_Limelight";
import {ProteinPositionFilter_UserSelections_StateObject} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__peptide_page__components/protein_position_filter_component/js/proteinPositionFilter_UserSelections_StateObject";

import {ModificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/modification_mass_open_mod_mass_zero_not_open_mod_user_selection/js/modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData";
import {ModificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/modification_mass_open_mod_mass_zero_not_open_mod_user_selection/js/modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass";
import {modificationMass_OpenModMassZeroNotOpenMod_UserSelection_Build_ComponentData_ForReactComponent_ReturnPromise} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/modification_mass_open_mod_mass_zero_not_open_mod_user_selection/js/modificationMass_OpenModMassZeroNotOpenMod_UserSelection_Build_ComponentData";
import {CentralPageStateManager} from "page_js/data_pages/central_page_state_manager/centralPageStateManager";
import {
    ModificationMass_ReporterIon__UserSelections__Coordinator_Class,
    ModificationMass_ReporterIon__UserSelections__Coordinator_Class__Contents_Changed_Callback
} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/modification_mass_reporter_ion__user_selections__coordinator/js/modificationMass_ReporterIon__UserSelections__Coordinator_Class";
import {ModificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__modification__reporter_ion/modification_mass_reporter_ion__user_selections__coordinator/js/modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class";
import {ScanFilenameId_On_PSM_Filter_UserSelection_StateObject} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/scan_file_name_on_psms_selection/js/scanFilenameId_On_PSM_Filter_UserSelection_StateObject";
import {Scan_RetentionTime_MZ_UserSelections_StateObject} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/scan_retention_time_precursor_m_z_selection/js/scan_RetentionTime_MZ_UserSelections_StateObject";
import {Scan_RetentionTime_MZ_UserSelections_Component} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/scan_retention_time_precursor_m_z_selection/jsx/scan_RetentionTime_MZ_UserSelections_Component";
import {ScanFilenameId_On_PSM_Filter_UserSelection_Component} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/scan_file_name_on_psms_selection/jsx/scanFilenameId_On_PSM_Filter_UserSelection_Component";
import {
    CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder,
    CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_SingleSearch_SingleScanFile_Entry
} from "page_js/data_pages/common_data_loaded_from_server__per_search_plus_some_assoc_common_data__with_loading_code__except_mod_main_page/common_data_loaded_from_server_multiple_searches_sub_parts__returned_objects/commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId";
import {FilterSection_DataPage_ShowHide_ExpandCollapse_Container_Component} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__show_hide__expand_collapse_container_component/filterSection_DataPage_ShowHide_ExpandCollapse_Container_Component";
import {FilterOn_SearchProgramsGroup_ConditionalRender_Component} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__search_programs_group__conditional_render__component/filterOn_SearchProgramsGroup_ConditionalRender_Component";
import {CommonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root} from "page_js/data_pages/common_data_loaded_from_server__per_search_plus_some_assoc_common_data__with_loading_code__except_mod_main_page/commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root";
import {Psm_Charge_Filter_UserSelection_Container_Component} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/psm_charge/psm_Charge_Filter_UserSelection_Container_Component";
import {Psm_Charge_Filter_UserSelection_StateObject} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/psm_charge/psm_Charge_Filter_UserSelection_StateObject";
import {purge_FilterSelections_NotIn_CurrentData} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/purge_filter_selections_not_in_current_data/purge_FilterSelections_NotIn_CurrentData";
import {ProteinPositionFilter_UserSelections__GetsProteinData} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__peptide_page__components/protein_position_filter_component/jsx/proteinPositionFilter_UserSelections_Component__Container__GetsProteinData";
import {Psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/psm_exclude_independent_decoy_psms/psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject";
import { Psm_Exclude_IndependentDecoy_PSMs_UserSelection } from 'page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/psm_exclude_independent_decoy_psms/psm_Exclude_IndependentDecoy_PSMs_UserSelection';
import {PeptideSequence_MissedCleavageCount_UserSelections_Component} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__peptide_sequence_missed_cleavage_count/jsx/peptideSequence_MissedCleavageCount_UserSelections_Component";
import {PeptideSequence_MissedCleavageCount_UserSelections_StateObject} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__peptide_sequence_missed_cleavage_count/js/peptideSequence_MissedCleavageCount_UserSelections_StateObject";
import {PeptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_Component} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__peptide_meets_digestion__aka_tryptic_peptide_etc/peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_Component";
import {PeptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/filter_on__peptide_meets_digestion__aka_tryptic_peptide_etc/peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject";
import { CommonData_LoadedFromServer_From_ProjectScanFileId___ROOT } from "page_js/data_pages/common_data_loaded_from_server__scan_data__from_project_scan_file_id/commonData_LoadedFromServer_From_ProjectScanFileId___ROOT";
import { CommonData_LoadedFromServer_FeatureDetection_From_FeatureDetectionToProjectScanFileMappingId___ROOT } from "page_js/data_pages/common_data_loaded_from_server__feature_detection_data__from_feat_detect_to_project_scan_file_mapping_id/commonData_LoadedFromServer_FeatureDetection_From_FeatureDetectionToProjectScanFileMappingId___ROOT";
import {
    ScanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection__Component
} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/scan_number_and_file_name_or_search__on_psms_selection/jsx/scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_Component";
import {
    ScanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject
} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/scan_number_and_file_name_or_search__on_psms_selection/js/scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject";
import {
    ScanPeak_M_Over_Z__Intensity_Filter_UserSelection_Component
} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/scan_peak__mz_intensity/jsx/scanPeak_M_Over_Z__Intensity_Filter_UserSelection_Component";
import {
    ScanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject
} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/filter_on__components/filter_on__core__components__peptide__single_protein/scan_peak__mz_intensity/js/scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject";
import {
    ScanFileToSearchesPageRoot_CentralStateManagerObjectClass
} from "page_js/data_pages/project_search_ids_driven_pages/scan_file_to_searches_page/main_page_code/scanFileToSearchesPageRoot_CentralStateManagerObjectClass";
import {
    ScanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions
} from "page_js/data_pages/project_search_ids_driven_pages/scan_file_to_searches_page/main_page_code/scanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions";
import {
    CommonData_LoadedFromServer_SingleSearch__ScanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder
} from "page_js/data_pages/common_data_loaded_from_server__per_search_plus_some_assoc_common_data__with_loading_code__except_mod_main_page/common_data_loaded_from_server_single_search_sub_parts__returned_objects/commonData_LoadedFromServer_SingleSearch__ScanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch";
import {
    CommonData_LoadedFromServer_SingleSearch__PSM_TblData_For_ReportedPeptideId_For_MainFilters_Holder,
    CommonData_LoadedFromServer_SingleSearch__PSM_TblData_For_ReportedPeptideId_For_MainFilters_Holder__ForSinglePsmId
} from "page_js/data_pages/common_data_loaded_from_server__per_search_plus_some_assoc_common_data__with_loading_code__except_mod_main_page/common_data_loaded_from_server_single_search_sub_parts__returned_objects/commonData_LoadedFromServer_SingleSearch__PSM_TblData_For_ReportedPeptideId_For_MainFilters";
import {
    ScanFileToSearches_Page_FiltersDisplay_ComponentData
} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/current_filters_display_block__each_root_component_and_their_data_objects/scan_file_to_searches_page/scanFilesToSearches_Page_FiltersDisplay_ComponentData";
import {
    ScanFileToSearches_Page_FiltersDisplay
} from "page_js/data_pages/common_filtering_code_filtering_components__except_mod_main_page/current_filters_display_block__each_root_component_and_their_data_objects/scan_file_to_searches_page/scanFileToSearches_Page_FiltersDisplay";
import {
    limelight__Sort_ArrayOfNumbers_SortArrayInPlace
} from "page_js/common_all_pages/limelight__Sort_ArrayOfNumbers_SortArrayInPlace";
import {
    CommonData_LoadedFromServer_SingleSearch__Variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder
} from "page_js/data_pages/common_data_loaded_from_server__per_search_plus_some_assoc_common_data__with_loading_code__except_mod_main_page/common_data_loaded_from_server_single_search_sub_parts__returned_objects/commonData_LoadedFromServer_SingleSearch__Variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters";
import {
    reportedPeptideDisplay_CommonValue_AcrossSearches_C_TERMINUS_POSITION_INDEX,
    reportedPeptideDisplay_CommonValue_AcrossSearches_N_TERMINUS_POSITION_INDEX
} from "page_js/data_pages/reported_peptide__generated_common__across_searches/reportedPeptide_CommonValue_AcrossSearches";
import {
    CommonData_LoadedFromServer_SingleSearch__OpenModifications_On_PSM_For_MainFilters_Holder,
    CommonData_LoadedFromServer_SingleSearch__OpenModifications_On_PSM_For_PsmId
} from "page_js/data_pages/common_data_loaded_from_server__per_search_plus_some_assoc_common_data__with_loading_code__except_mod_main_page/common_data_loaded_from_server_single_search_sub_parts__returned_objects/commonData_LoadedFromServer_SingleSearch__OpenModifications_On_PSM_For_MainFilters";
import {
    reportedPeptideDisplay_CreateCommonDisplayString_AcrossSearches,
    reportedPeptideDisplay_CreateCommonDisplayString_AcrossSearches_C_TERMINUS_POSITION_INDEX,
    reportedPeptideDisplay_CreateCommonDisplayString_AcrossSearches_N_TERMINUS_POSITION_INDEX
} from "page_js/data_pages/reported_peptide__generated_common__across_searches/reportedPeptideDisplay_CreateCommonDisplayString_AcrossSearches";
import {
    CommonData_LoadedFromServer_SingleSearch__PeptideIds_For_MainFilters_Holder
} from "page_js/data_pages/common_data_loaded_from_server__per_search_plus_some_assoc_common_data__with_loading_code__except_mod_main_page/common_data_loaded_from_server_single_search_sub_parts__returned_objects/commonData_LoadedFromServer_SingleSearch__PeptideIds_For_MainFilters";
import {
    CommonData_LoadedFromServer_CommonAcrossSearches__PeptideSequences_For_MainFilters_Holder
} from "page_js/data_pages/common_data_loaded_from_server__per_search_plus_some_assoc_common_data__with_loading_code__except_mod_main_page/common_data_loaded_from_server_common_across_searches_sub_parts__returned_objects/commonData_LoadedFromServer_CommonAcrossSearches__PeptideSequences_For_MainFilters";
import {
    DataTable_Column,
    DataTable_Column_DownloadTable,
    DataTable_DataRow_ColumnEntry,
    DataTable_DataRow_ColumnEntry_SearchTableData,
    DataTable_DataRowEntry,
    DataTable_DataRowEntry__Get_RowChildContent_CallParams,
    DataTable_DataRowEntry__Get_RowChildContent_Return_ChildContent,
    DataTable_DataRowEntry_DownloadTable,
    DataTable_DataRowEntry_DownloadTable_SingleColumn,
    DataTable_RootTableDataObject,
    DataTable_RootTableObject,
    DataTable_TableOptions
} from "page_js/data_pages/data_table_react/dataTable_React_DataObjects";
import { DataTable_TableRoot } from "page_js/data_pages/data_table_react/dataTable_TableRoot_React";
import {
    scanFileToSearchesPage_Display_MainTableRow_ChildBlock__Get_Component,
    ScanFileToSearchesPage_Display_MainTableRow_ChildBlock_Component_Data_SinglePSM,
    ScanFileToSearchesPage_Display_MainTableRow_ChildBlock_Component_Data_SingleSearch,
    ScanFileToSearchesPage_Display_MainTableRow_ChildBlock_Component_Props_Prop
} from "page_js/data_pages/project_search_ids_driven_pages/scan_file_to_searches_page/main_table_row_child_block/scanFileToSearchesPage_Display_MainTableRow_ChildBlock_Component";
import {
    AnnotationTypesToDisplay__MainPageComponent_to_Open_SelectionOverlay__Component
} from "page_js/data_pages/common_components__react/annotation_types_to_display__selection_update_component/annotationTypesToDisplay__MainPageComponent_to_Open_SelectionOverlay__Component";
import {
    ProjectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject
} from "page_js/data_pages/project_search_ids_driven_pages/scan_file_to_searches_page/main_page_code/projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject";


////


/////////////////////////

//  Constants

//////////////////////////////////


/**
 * 
 */
export class ScanFileToSearchesPage_Display_MainContent_Component_Props_Prop {

    projectSearchIds : Array<number>;
    dataPageStateManager : DataPageStateManager
    dataPageStateManager_ProjectSearchIdsTheirFiltersAnnTypeDisplay : DataPageStateManager;
    searchDetailsBlockDataMgmtProcessing : SearchDetailsBlockDataMgmtProcessing;

    centralPageStateManager: CentralPageStateManager
    searchSubGroup_CentralStateManagerObjectClass : SearchSubGroup_CentralStateManagerObjectClass
    scanFileToSearchesPageRoot_CentralStateManagerObjectClass: ScanFileToSearchesPageRoot_CentralStateManagerObjectClass
    modificationMass_UserSelections_StateObject : ModificationMass_UserSelections_StateObject;
    modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass : ModificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass
	reporterIonMass_UserSelections_StateObject : ReporterIonMass_UserSelections_StateObject;
    peptideUnique_UserSelection_StateObject : PeptideUnique_UserSelection_StateObject;
	peptideSequence_UserSelections_StateObject : PeptideSequence_UserSelections_StateObject;
    peptideSequence_MissedCleavageCount_UserSelections_StateObject: PeptideSequence_MissedCleavageCount_UserSelections_StateObject;
    peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject: PeptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject
    proteinPositionFilter_UserSelections_StateObject : ProteinPositionFilter_UserSelections_StateObject;

    generatedPeptideContents_UserSelections_StateObject : GeneratedPeptideContents_UserSelections_StateObject;
    scanFilenameId_On_PSM_Filter_UserSelection_StateObject : ScanFilenameId_On_PSM_Filter_UserSelection_StateObject
    scan_RetentionTime_MZ_UserSelection_StateObject : Scan_RetentionTime_MZ_UserSelections_StateObject
    psm_Charge_Filter_UserSelection_StateObject : Psm_Charge_Filter_UserSelection_StateObject
    psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject : Psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject
    scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject : ScanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject
    scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject : ScanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject
    projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject: ProjectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject

    dataPages_LoggedInUser_CommonObjectsFactory : DataPages_LoggedInUser_CommonObjectsFactory
}

/**
 * 
 */
export interface ScanFileToSearchesPage_Display_MainContent_Component_Props {

    propsValue : ScanFileToSearchesPage_Display_MainContent_Component_Props_Prop
}

/**
 * 
 */
interface ScanFileToSearchesPage_Display_MainContent_Component_State {

    force_Rerender?: object

    mainDisplayData_Loaded? : boolean;

    searchDataLookupParamsRoot? : SearchDataLookupParameters_Root;

    commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root?: CommonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root
    getReportedPeptideIdsForDisplay_AllProjectSearchIds_Object?: GetReportedPeptideIdsForDisplay_AllProjectSearchIds_Class

    commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder?: CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder

    searchDetailsAndFilterBlock_MainPage_Root_Props_PropValue? : SearchDetailsAndFilterBlock_MainPage_Root_Props_PropValue

    searchSubGroup_Are_All_SearchSubGroupIds_Selected? : boolean
    searchSubGroup_PropValue? : SearchSubGroup_In_SearchDetailsAndFilter_Component_DisplayData;

    modificationMassSelections_AlwaysShow__ClearOn_ObjectReferenceChange?: object  //  Clear modificationMassSelections_AlwaysShow in Modifications Filter On Component when this object reference changes
    modificationMass_UserSelections_ComponentData? : ModificationMass_UserSelections_ComponentData; // Only updated when new updated need to push new values from above components
    modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData? : ModificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData; // Only updated when new updated need to push new values from above components
    reporterIons_UserSelections_ComponentData? : ReporterIonMass_UserSelections_ComponentData;
    peptideUnique_UserSelection_ComponentData? : PeptideUnique_UserSelection_ComponentData;
    peptideSequence_UserSelections_ComponentData? : PeptideSequence_UserSelections_ComponentData;
    proteinPositionFilter_UserSelections_Component_Force_ReRender_Object? : object;
    peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_Object_Force_ResetToStateObject? : object;
    scanFilenameId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject? : object
    scan_RetentionTime_MZ_UserSelections_Object_Force_ResetToStateObject? : object;
    peptideSequence_MissedCleavageCount_UserSelections_Object_Force_ResetToStateObject? : object;
    psm_Charge_Filter_UserSelection_Object_Force_ResetToStateObject?: object;
    psm_Exclude_IndependentDecoy_PSMs_UserSelection_Object_Force_ResetToStateObject?: object
    scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject?: object
    scanPeak_M_Over_Z__Intensity_Filter_UserSelection_Object_Force_ResetToStateObject?: object

    scanFileToSearches_Page_FiltersDisplay_ComponentData? : ScanFileToSearches_Page_FiltersDisplay_ComponentData;

    reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds_ForPeptideList? : Peptide__single_protein_getReportedPeptideIds_From_SelectionCriteria_AllProjectSearchIds;  //  For displaying the peptide list in sub component

    updating_Next_reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds_ForPeptideList? : boolean;

    //  User made a selection that resulted in a AJAX request for data.  Page update for filtered Peptides will wait for the AJAX to complete.  Display message loading data.
    gettingDataFor_Filtering_reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds? : boolean;

    //  User made a selection that resulted in a AJAX request for data.  Page update for filtered Peptides will wait for the AJAX to complete.  Display message loading data.
    gettingDataFor_Filtering_reportedPeptideIdsForDisplay? : boolean;

    //
    modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ModificationSelects? : ModificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class
    modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ReporterIonSelections? : ModificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class

    saveView_Component_React?: any //  React Component for Save View
    saveView_Component_Props_Prop?: any //  Object passed to saveView_Component_React as property propsValue


    scanFile_Selected_ScanFilenames_CommaDelim?: string

    mainDisplay_DataTable_RootTableObject?: DataTable_RootTableObject
}

/**
 * 
 */
export class ScanFileToSearchesPage_Display_MainContent_Component extends React.Component< ScanFileToSearchesPage_Display_MainContent_Component_Props, ScanFileToSearchesPage_Display_MainContent_Component_State > {

    //  bind to 'this' for passing as parameters

    private _searchSubGroup_SelectionsChanged_Callback_BindThis = this._searchSubGroup_SelectionsChanged_Callback.bind(this);
    private _modificationMass_ReporterIon__UserSelections__Coordinator_Class__Contents_Changed_Callback_BindThis = this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__Contents_Changed_Callback.bind(this);

    private _NOT_CALLED_Function() {

        //  Test function cast

        const modificationMass_ReporterIon__UserSelections__Coordinator_Class__Contents_Changed_Callback : ModificationMass_ReporterIon__UserSelections__Coordinator_Class__Contents_Changed_Callback =
            this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__Contents_Changed_Callback;
    }

    private _clearAllSelections_BindThis = this._clearAllSelections.bind(this);

    private _openModificationMass_OpenUserSelections_Overlay_Override_BindThis : () => void = this._openModificationMass_OpenUserSelections_Overlay_Override.bind(this)
    private _openModificationMass_OpenUserSelections_Overlay_SelectionChangedCallback_BindThis : () => void = this._openModificationMass_OpenUserSelections_Overlay_SelectionChangedCallback.bind(this)

    private _modificationMass_UserSelections_UpdateMadeTo_StateObject_Callback_BindThis : () => void = this._modificationMass_UserSelections_UpdateMadeTo_StateObject_Callback.bind(this);
    private _modificationMass_Update_modificationMass_UserSelections_ComponentData_Callback_BindThis : () => void = this._modificationMass_Update_modificationMass_UserSelections_ComponentData_Callback.bind(this);
    private _updateMadeTo_modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass_Callback_BindThis : () => void = this._updateMadeTo_modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass_Callback.bind(this);

    private _updateMadeTo_reporterIonMass_UserSelections_StateObject_Callback_BindThis : () => void = this._updateMadeTo_reporterIonMass_UserSelections_StateObject_Callback.bind(this);
    private _updateMadeTo_peptideUnique_UserSelection_StateObject_Callback_BindThis : () => void = this._updateMadeTo_peptideUnique_UserSelection_StateObject_Callback.bind(this);

    private _updateMadeTo_peptideSequence_UserSelections_StateObject_Callback_BindThis : () => void = this._updateMadeTo_peptideSequence_UserSelections_StateObject.bind(this);
    private _updateMadeTo_peptideSequence_MissedCleavageCount_UserSelections_StateObject_Callback_BindThis : () => void = this._updateMadeTo_peptideSequence_MissedCleavageCount_UserSelections_StateObject_Callback.bind(this);
    private _updateMadeTo_peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject_StateObject_Callback_BindThis : () => void = this._updateMadeTo_peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject_StateObject_Callback.bind(this);
    private _updateMadeTo_proteinPositionFilter_UserSelections_StateObject_Callback_BindThis = this._updateMadeTo_proteinPositionFilter_UserSelections_StateObject_Callback.bind(this);


    private _updateMadeTo_generatedPeptideContents_UserSelections_StateObject_Callback_BindThis : () => void = this._updateMadeTo_generatedPeptideContents_UserSelections_StateObject_Callback.bind(this);

    // private _updateMadeTo_peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_StateObject_Callback_BindThis : () => void = this._updateMadeTo_peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_StateObject_Callback.bind(this);

    private _updateMadeTo_scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject_Callback_BindThis : () => void = this._updateMadeTo_scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject_Callback.bind(this)
    private _updateMadeTo_scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject_Callback_BindThis = this._updateMadeTo_scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject_Callback.bind(this)

    private _updateMadeTo_scanFilenameId_On_PSM_Filter_UserSelection_StateObject_Callback_BindThis : () => void = this._updateMadeTo_scanFilenameId_On_PSM_Filter_UserSelection_StateObject_Callback.bind(this);
    private _updateMadeTo_Scan_RetentionTime_MZ_UserSelections_StateObject_Callback_BindThis : () => void = this._updateMadeTo_Scan_RetentionTime_MZ_UserSelections_StateObject_Callback.bind(this);
    private _updateMadeTo_psm_Charge_Filter_UserSelection_StateObject_Callback_BindThis : () => void = this._updateMadeTo_psm_Charge_Filter_UserSelection_StateObject_Callback.bind(this);
    private _updateMadeTo_psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject_Callback_BindThis : () => void = this._updateMadeTo_psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject_Callback.bind(this);

    private _div_MainGridAtTop_Ref : React.RefObject<HTMLDivElement>; //  React.createRef()  for Main <div> containing grid of left and on right the boxes Summary ...
    private _div_MainContent_LeftGridEntry_AtTop_Ref : React.RefObject<HTMLDivElement>; //  React.createRef()  for Left <div> inside this._div_MainGridAtTop_Ref

    private _proteinPage_Display__SingleProtein_GeneratedReportedPeptideListSection_Component_React_Container_Ref : React.RefObject<HTMLDivElement>; //  React.createRef()  for container <div> around <ProteinPage_Display__SingleProtein_GeneratedReportedPeptideListSection_Component>

    private _modificationMass_ReporterIon__UserSelections__Coordinator_Class__For_ModificationSelects : ModificationMass_ReporterIon__UserSelections__Coordinator_Class
    private _modificationMass_ReporterIon__UserSelections__Coordinator_Class__For_ReporterIonSelections : ModificationMass_ReporterIon__UserSelections__Coordinator_Class

    //  Loaded data from server

    private _scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId: Map<number, CommonData_LoadedFromServer_SingleSearch__ScanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder> = new Map()
    private _commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder: CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder

    private _psmTblData_For_ReportedPeptideId_For_MainFilters_Holder_Map_Key_ProjectSearchId: Map<number, CommonData_LoadedFromServer_SingleSearch__PSM_TblData_For_ReportedPeptideId_For_MainFilters_Holder> = new Map()

    private _peptideIds_For_MainFilters_Holder_Map_Key_ProjectSearchId: Map<number, CommonData_LoadedFromServer_SingleSearch__PeptideIds_For_MainFilters_Holder> = new Map();

    private _peptideSequences_For_MainFilters_Holder: CommonData_LoadedFromServer_CommonAcrossSearches__PeptideSequences_For_MainFilters_Holder = undefined

    //  Map<(project search id), Map<(reported peptide), Map<(position),Array<(mod mass rounded number)>>>
    _variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId_Map_Key_ProjectSearchId : Map<number, Map<number, Map<number, Set<number>>>> = undefined;

    _openModifications_On_PSM_For_MainFilters_Holder_Map_Key_ProjectSearchId : Map<number, CommonData_LoadedFromServer_SingleSearch__OpenModifications_On_PSM_For_MainFilters_Holder> = undefined;



    //  Flags Set to true/false in constructor

    private _allSearches_Have_ScanFilenames: boolean
    private _allSearches_Have_ScanData: boolean
    private _allSearches_Have_PSM_RetentionTime_Precursor_MZ: boolean
    private _allSearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData: boolean

    private _anySearches_Have_ScanFilenames: boolean
    private _anySearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData: boolean


    //  Flags Set to true/false in various places

    private _searchesContains_VariableModifications = false;
    private _searchesContains_OpenModifications = false;
    private _searchesContains_StaticModifications = false;

    private _projectSearchId_Count_GreaterThan_One = false

    private _searches_NOT_ContainScanFile_ProjectSearchId_Set: Set<number> = new Set()

    private _show_ScanFileSelectionBlock = false

    private _show_NoScanFileData_In_AnySearches = false


    /**
     * 
     */    
    constructor(props : ScanFileToSearchesPage_Display_MainContent_Component_Props) {
        super(props);

        const projectSearchIds = props.propsValue.projectSearchIds;

        this._div_MainGridAtTop_Ref = React.createRef<HTMLDivElement>();
        this._div_MainContent_LeftGridEntry_AtTop_Ref = React.createRef<HTMLDivElement>();

        this._proteinPage_Display__SingleProtein_GeneratedReportedPeptideListSection_Component_React_Container_Ref = React.createRef<HTMLDivElement>();

        this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__For_ModificationSelects =
            new ModificationMass_ReporterIon__UserSelections__Coordinator_Class({
                contents_Changed_Callback: this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__Contents_Changed_Callback_BindThis,
                modificationMass_UserSelections_StateObject: props.propsValue.modificationMass_UserSelections_StateObject,
                reporterIonMass_UserSelections_StateObject: new ReporterIonMass_UserSelections_StateObject()
            })

        this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__For_ReporterIonSelections =
            new ModificationMass_ReporterIon__UserSelections__Coordinator_Class({
                contents_Changed_Callback: this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__Contents_Changed_Callback_BindThis,
                modificationMass_UserSelections_StateObject: new ModificationMass_UserSelections_StateObject(),
                reporterIonMass_UserSelections_StateObject: props.propsValue.reporterIonMass_UserSelections_StateObject
            })

        const modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ModificationSelects =
            this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__For_ModificationSelects.get_Current_ModificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class();

        const modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ReporterIonSelections =
            this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__For_ReporterIonSelections.get_Current_ModificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class();

        const searchDataLookupParamsRoot: SearchDataLookupParameters_Root =
            props.propsValue.searchDetailsBlockDataMgmtProcessing.getSearchDetails_Filters_AnnTypeDisplay_ForWebserviceCalls_AllProjectSearchIds();

        //  Main Data Loader object

        const commonData_LoadedFromServer_From_ProjectScanFileId___ROOT = CommonData_LoadedFromServer_From_ProjectScanFileId___ROOT.getNewInstance()

        const commonData_LoadedFromServer_FeatureDetection_From_FeatureDetectionToProjectScanFileMappingId___ROOT = CommonData_LoadedFromServer_FeatureDetection_From_FeatureDetectionToProjectScanFileMappingId___ROOT.getNewInstance()

        const commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root = CommonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root.getNewInstance({
            projectSearchIds, searchDataLookupParameters_Root: searchDataLookupParamsRoot, dataPageStateManager: props.propsValue.dataPageStateManager,
            commonData_LoadedFromServer_From_ProjectScanFileId___ROOT, commonData_LoadedFromServer_FeatureDetection_From_FeatureDetectionToProjectScanFileMappingId___ROOT
        });

        //  Main Filtering object
        const getReportedPeptideIdsForDisplay_AllProjectSearchIds_Object = GetReportedPeptideIdsForDisplay_AllProjectSearchIds_Class.getNewInstance({
            projectSearchIds, dataPage_common_Searches_Flags: props.propsValue.dataPageStateManager.get_DataPage_common_Searches_Flags(),
            commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root
        });


        const searchDetailsAndFilterBlock_MainPage_Root_Props_PropValue : SearchDetailsAndFilterBlock_MainPage_Root_Props_PropValue =
            ScanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions.compute_searchDetailsAndFilterBlock_MainPage_Root_Props_PropValue({
            propsValue : props.propsValue
        });

        let saveView_Component_React = undefined;
        let saveView_Component_Props_Prop = undefined;

        if ( props.propsValue.dataPages_LoggedInUser_CommonObjectsFactory ) {

            if ( props.propsValue.dataPages_LoggedInUser_CommonObjectsFactory.getFunctionToGet_SaveView_dataPages_ComponentAndProps ) {
                const saveView_Create_Component_React_Type : SaveView_Create_Component_React_Type = (
                    props.propsValue.dataPages_LoggedInUser_CommonObjectsFactory.getFunctionToGet_SaveView_dataPages_ComponentAndProps()
                );

                const result : SaveView_Create_Component_React_Result = saveView_Create_Component_React_Type({ projectSearchIds : props.propsValue.projectSearchIds, experimentId : undefined });
                saveView_Component_React = result.saveView_Component_React
                saveView_Component_Props_Prop = result.saveView_Component_Props_Prop
            }
        }

        let allSearches_Have_ScanFilenames = true;
        let allSearches_Have_ScanData = true;
        let allSearches_Have_PSM_RetentionTime_Precursor_MZ = true;
        let allSearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData = true;

        let anySearches_Have_ScanFilenames = false;
        let anySearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData = false;

        {
            const projectSearchIds_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData = new Set<number>();

            for ( const projectSearchId of props.propsValue.projectSearchIds ) {

                const dataPage_common_Flags_SingleSearch_ForProjectSearchId = this.props.propsValue.dataPageStateManager.get_DataPage_common_Searches_Flags().get_DataPage_common_Flags_SingleSearch_ForProjectSearchId(projectSearchId);
                if (!dataPage_common_Flags_SingleSearch_ForProjectSearchId) {
                    const msg = "this.props.propsValue.dataPageStateManager.get_DataPage_common_Searches_Flags().get_DataPage_common_Flags_SingleSearch_ForProjectSearchId(projectSearchId); returned NOTHING for projectSearchId: " + projectSearchId;
                    console.warn(msg);
                    throw Error(msg);
                }

                if ( ! dataPage_common_Flags_SingleSearch_ForProjectSearchId.hasScanFilenames) {
                    allSearches_Have_ScanFilenames = false;
                } else {
                    anySearches_Have_ScanFilenames = true;
                }
                if ( ! dataPage_common_Flags_SingleSearch_ForProjectSearchId.hasScanData) {
                    allSearches_Have_ScanData = false;
                } else {
                    anySearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData = true;
                    projectSearchIds_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData.add( projectSearchId );
                }
            }

            for ( const projectSearchId of props.propsValue.projectSearchIds ) {

                const dataPage_common_Info_SingleSearch_ForProjectSearchId = this.props.propsValue.dataPageStateManager.get_DataPage_common_Searches_Info().get_DataPage_common_Searches_Info_SingleSearch_ForProjectSearchId(projectSearchId);
                if (!dataPage_common_Info_SingleSearch_ForProjectSearchId) {
                    const msg = "this.props.propsValue.dataPageStateManager.get_DataPage_common_Searches_Flags().get_DataPage_common_Flags_SingleSearch_ForProjectSearchId(projectSearchId); returned NOTHING for projectSearchId: " + projectSearchId;
                    console.warn(msg);
                    throw Error(msg);
                }

                if ( ( ! dataPage_common_Info_SingleSearch_ForProjectSearchId.precursor_retention_time__NotNull )
                || ( ! dataPage_common_Info_SingleSearch_ForProjectSearchId.precursor_m_z__NotNull ) ) {

                    allSearches_Have_PSM_RetentionTime_Precursor_MZ = false;
                } else {
                    projectSearchIds_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData.add( projectSearchId );
                    anySearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData = true;
                }
            }

            for ( const projectSearchId of props.propsValue.projectSearchIds ) {

                if ( ! projectSearchIds_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData.has( projectSearchId ) ) {
                    allSearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData = false;
                    break;
                }
            }
        }

        this._allSearches_Have_ScanFilenames = allSearches_Have_ScanFilenames;
        this._allSearches_Have_ScanData = allSearches_Have_ScanData;
        this._allSearches_Have_PSM_RetentionTime_Precursor_MZ = allSearches_Have_PSM_RetentionTime_Precursor_MZ;
        this._allSearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData = allSearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData;

        this._anySearches_Have_ScanFilenames = anySearches_Have_ScanFilenames;
        this._anySearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData = anySearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData;

        if ( ! this._allSearches_Have_ScanFilenames ) {
            props.propsValue.scanFilenameId_On_PSM_Filter_UserSelection_StateObject.clearAll();
        }
        if ( ! this._allSearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData ) {
            props.propsValue.scan_RetentionTime_MZ_UserSelection_StateObject.clearAll();
        }

        this.state = {
            mainDisplayData_Loaded: false,
            searchDataLookupParamsRoot,
            searchDetailsAndFilterBlock_MainPage_Root_Props_PropValue,
            commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root,
            getReportedPeptideIdsForDisplay_AllProjectSearchIds_Object,
            saveView_Component_React,
            saveView_Component_Props_Prop,
            modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ModificationSelects,
            modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ReporterIonSelections,
            proteinPositionFilter_UserSelections_Component_Force_ReRender_Object: {},
            scanFilenameId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject: {},
            scan_RetentionTime_MZ_UserSelections_Object_Force_ResetToStateObject: {},
            peptideSequence_MissedCleavageCount_UserSelections_Object_Force_ResetToStateObject: {},
            psm_Charge_Filter_UserSelection_Object_Force_ResetToStateObject: {},
            psm_Exclude_IndependentDecoy_PSMs_UserSelection_Object_Force_ResetToStateObject: {},
            scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject: {},
            scanPeak_M_Over_Z__Intensity_Filter_UserSelection_Object_Force_ResetToStateObject: {}
        };
    }

    /**
     * 
     */   
    componentDidMount() {
        try {
            window.setTimeout( () => {
                try {
                    this._runOnPageLoad();

                } catch( e ) {
                    console.warn("Exception caught in componentDidMount inside setTimeout");
                    console.warn( e );
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 10 );

        } catch( e ) {
			console.warn("Exception caught in componentDidMount");
            console.warn( e );
			reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
			throw e;
		}
    }

    /**
     *  Run on Page Load.  call from componentDidMount
     */
    private _runOnPageLoad() {

        const promises: Array<Promise<void>> = [];

        let retrieved_ScanFileData_ForAnySearch = false

        for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

            const common_Flags_SingleSearch_ForProjectSearchId = this.props.propsValue.dataPageStateManager.get_DataPage_common_Searches_Flags().get_DataPage_common_Flags_SingleSearch_ForProjectSearchId( projectSearchId )
            if ( ! common_Flags_SingleSearch_ForProjectSearchId ) {
                throw new Error( "No value from this.props.propsValue.dataPageStateManager.get_DataPage_common_Searches_Flags().get_DataPage_common_Flags_SingleSearch_ForProjectSearchId(projectSearchId) for projectSearchId: " + projectSearchId );
            }

            if ( ! common_Flags_SingleSearch_ForProjectSearchId.hasScanData ) {
                //  No Scan Data for Search so skip the search.  Later add coding elsewhere to skip searches without scan data
                continue  //  EARLY CONTINUE
            }

            retrieved_ScanFileData_ForAnySearch = true

            const commonData_LoadedFromServer_PerSearch_For_ProjectSearchId =  // state object populated in constructor
                this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root.get__commonData_LoadedFromServer_PerSearch_For_ProjectSearchId(projectSearchId);
            if ( ! commonData_LoadedFromServer_PerSearch_For_ProjectSearchId ) {
                throw new Error("No value from this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root.get__commonData_LoadedFromServer_PerSearch_For_ProjectSearchId(projectSearchId); for projectSearchId: " + projectSearchId );
            }

            const scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_DataHolder_AllForSearch_Result =
                commonData_LoadedFromServer_PerSearch_For_ProjectSearchId.get_commonData_LoadedFromServer_SingleSearch__ScanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch().get_ScanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_DataHolder_AllForSearch()

            if ( scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_DataHolder_AllForSearch_Result.data ) {

                this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.set( projectSearchId, scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_DataHolder_AllForSearch_Result.data.scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder )

            } else if ( scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_DataHolder_AllForSearch_Result.promise ) {

                const promise = new Promise<void>( (resolve, reject) => {
                    try {
                        scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_DataHolder_AllForSearch_Result.promise.catch( reason => {
                            try {
                                console.warn( "get_reportedPeptideIds_HasDynamicModifications_Result.promise.catch: reason: ", reason )
                                reject(reason);
                            } catch( e ) {
                                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                throw e;
                            }
                        });
                        scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_DataHolder_AllForSearch_Result.promise.then( value => {
                            try {
                                this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.set( projectSearchId, value.scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder )

                                resolve();

                            } catch( e ) {
                                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                throw e;
                            }
                        });
                    } catch( e ) {
                        reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                        throw e;
                    }
                })
                promises.push(promise);

            } else {
                throw Error("scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_DataHolder_AllForSearch_Result. neither of 'data' or 'promise' set ");
            }
        }

        if ( retrieved_ScanFileData_ForAnySearch ) {

            const get_ScanFileDataHolder_Result =
                this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root.
                get__commonData_LoadedFromServer__Multiple_ProjectSearchIds().
                get_commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId().get_ScanFileDataHolder()

            if ( get_ScanFileDataHolder_Result.data ) {

                this._commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = get_ScanFileDataHolder_Result.data.scanFileData_Holder

            } else if ( get_ScanFileDataHolder_Result.promise ) {
                const promise = new Promise<void>( (resolve, reject) => {
                    try {
                        get_ScanFileDataHolder_Result.promise.catch( reason => {
                            try {
                                reject( reason )

                            } catch ( e ) {
                                reportWebErrorToServer.reportErrorObjectToServer( { errorException: e } );
                                throw e;
                            }
                        } );
                        get_ScanFileDataHolder_Result.promise.then( value => {

                            this._commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = value.scanFileData_Holder;

                            resolve();
                        } )

                    } catch( e ) {
                        reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                        throw e;
                    }
                })
                promises.push(promise);
            } else {
                throw Error("get_ScanFileDataHolder_Result no data or promise")
            }
        }

        if ( promises.length === 0 ) {

            this._runOnPageLoad_AfterInitialLoad()

        } else {
            const promiseAll = Promise.all(promises);
            promiseAll.catch( (reason) => {
                try {
                    console.warn("promise catch: reason: ", reason );
                    throw Error("promise catch: reason: " + reason )
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            });
            promiseAll.then( ( reportedPeptideCoreDataArray ) => {
                try {
                    this._runOnPageLoad_AfterInitialLoad()

                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            });
        }
    }

    /**
     *  Run on Page Load.  call from componentDidMount
     */
    private _runOnPageLoad_AfterInitialLoad() {

        if ( this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.size === 0 ) {

            //  No Scan Files for current searches so

            //   Display a message on the page of no scan file names found in the searches

            this._show_NoScanFileData_In_AnySearches = true

            this.setState({ force_Rerender: {} })

            return // EARLY RETURN
        }


        {  //  Get ProjectScanFileId Unique Value Count

            const projectScanFileId_Set = new Set<number>()

            for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {
                const scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder = this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.get( projectSearchId )
                if ( ! scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder ) {
                    continue // EARLY CONTINUE
                }
                const scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = this._commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId( projectSearchId )
                if ( ! scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder ) {
                    continue // EARLY CONTINUE
                    // throw new Error("No value from commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId(projectSearchId) for projectSearchId: " + projectSearchId );
                }
                for ( const searchScanFileData of scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_SearchScanFileData_IterableIterator() ) {
                    const scanFile_ProjectScanFileId_SearchScanFileId = scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId( searchScanFileData.searchScanFileId )
                    if ( ! scanFile_ProjectScanFileId_SearchScanFileId ) {
                        throw new Error( "No value from scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId(searchScanFileData.searchScanFileId) for searchScanFileData.searchScanFileId: " + searchScanFileData.searchScanFileId + ", projectSearchId: " + projectSearchId );
                    }
                    const projectScanFileId = scanFile_ProjectScanFileId_SearchScanFileId.projectScanFileId
                    projectScanFileId_Set.add( projectScanFileId )
                }
            }

            if ( projectScanFileId_Set.size === 0 ) {
            }
            if ( projectScanFileId_Set.size > 1) {

                this._projectSearchId_Count_GreaterThan_One = true
            }
        }

        let populated_projectScanFileId_etc = true

        const result__is_URL_ProjectScanFileId_etc =  this._runOnPageLoad_Is_URL_StateObject_ProjectScanFileId_SearchScanFileIds_In_CurrentSearches__Populate_this_searches_NOT_ContainScanFile_ProjectSearchId_Set()

        if ( ! result__is_URL_ProjectScanFileId_etc.yes__URL_ProjectScanFileId_SearchScanFileIds_In_CurrentSearches ) {

            //  No URL Page State has ProjectScanFileId, SearchScanFileIds OR they are not found in current

            //  Try to get ProjectScanFileId from DOM passed from Project Page

            const result__Is_URL_ProjectScanFileId_Populated = this._runOnPageLoad_Is_URL_ProjectScanFileId_From_ProjectPage_Populated__Populate_this_searches_NOT_ContainScanFile_ProjectSearchId_Set()


            if ( result__Is_URL_ProjectScanFileId_Populated.yes__URL_Has_ProjectScanFileId_FromProjectPage__NO_ProjectScanFileId_FoundInAnySearches ) {

                //  No Scan Files in current searches for passed in

                //  Display a message on the page of no scan file names found in the searches

                return // EARLY RETURN

            }

            if ( result__Is_URL_ProjectScanFileId_Populated.yes__URL_Has_ProjectScanFileId_FromProjectPage__Yes_ProjectScanFileId_FoundInAnySearches ) {

                //  Have data so continue

            } else if ( result__Is_URL_ProjectScanFileId_Populated.no__URL_Has_ProjectScanFileId_FromProjectPage ) {

                //  Compute ProjectScanFileId from current searches

                const result__Set_StateObject_ProjectScanFileId_SearchScanFileIds_From_CurrentSearches =
                    this._runOnPageLoad_Set_URL_PageStateObject_ProjectScanFileId_SearchScanFileIds_From_CurrentSearches__Populate_this_searches_NOT_ContainScanFile_ProjectSearchId_Set()

                if ( ! result__Set_StateObject_ProjectScanFileId_SearchScanFileIds_From_CurrentSearches.yes__Set_StateObject_ProjectScanFileId_SearchScanFileIds_From_CurrentSearches ) {

                    //  No projectScanFileId

                    //  TODO  Display a message on the page of no scan file names found in the searches

                    window.alert( "no scan file names found in the searches.  No projectScanFileId Computed for Searches." )

                    populated_projectScanFileId_etc = false
                }

            } else {
                throw Error("Unexpected values in 'result__Is_URL_ProjectScanFileId_Populated")
            }
        }

        if ( ! populated_projectScanFileId_etc ) {

            return // EARY RETURN
        }

        this._runOnPageLoad_MainLoad()
    }

    /**
     *  Run on Page Load.
     */
    private _runOnPageLoad_Is_URL_StateObject_ProjectScanFileId_SearchScanFileIds_In_CurrentSearches__Populate_this_searches_NOT_ContainScanFile_ProjectSearchId_Set () :
        {
            yes__URL_ProjectScanFileId_SearchScanFileIds_In_CurrentSearches: boolean
        } {


        const projectScanFileIdSelection = this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.get_projectScanFileIdSelection()
        const searchScanFileIdSelections = this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.get_searchScanFileIdSelections()

        if ( ( ! projectScanFileIdSelection ) || ( ! searchScanFileIdSelections ) || searchScanFileIdSelections.size === 0 ) {

            //  NO projectScanFileIdSelection or searchScanFileIdSelections so return not

            return {  //  EARLY RETURN
                yes__URL_ProjectScanFileId_SearchScanFileIds_In_CurrentSearches: false
            }
        }

        //  Validate all searchScanFileIdSelections in current searches

        const searchScanFileIdSelections_NewEntries: Set<number> = new Set() //  Recompute since Searches Changed

        const searches_YES_ContainScanFile_ProjectSearchId_Set: Set<number> = new Set()

        for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {
            const scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder = this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.get( projectSearchId )
            if ( ! scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder ) {
                continue // EARLY CONTINUE
            }
            const scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = this._commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId( projectSearchId )
            if ( ! scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder ) {
                continue // EARLY CONTINUE
                // throw new Error("No value from commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId(projectSearchId) for projectSearchId: " + projectSearchId );
            }
            for ( const searchScanFileData of scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_SearchScanFileData_IterableIterator() ) {
                const scanFile_ProjectScanFileId_SearchScanFileId = scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId( searchScanFileData.searchScanFileId )
                if ( ! scanFile_ProjectScanFileId_SearchScanFileId ) {
                    throw new Error( "No value from scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId(searchScanFileData.searchScanFileId) for searchScanFileData.searchScanFileId: " + searchScanFileData.searchScanFileId + ", projectSearchId: " + projectSearchId );
                }

                if ( projectScanFileIdSelection === scanFile_ProjectScanFileId_SearchScanFileId.projectScanFileId ) {

                    searchScanFileIdSelections_NewEntries.add( scanFile_ProjectScanFileId_SearchScanFileId.searchScanFileId )

                    searches_YES_ContainScanFile_ProjectSearchId_Set.add( projectSearchId )
                }
            }
        }

        if ( searches_YES_ContainScanFile_ProjectSearchId_Set.size === 0 ) {

            //  projectScanFileIdSelection NOT FOUND in ANY Searches

            return {  //  EARLY RETURN
                yes__URL_ProjectScanFileId_SearchScanFileIds_In_CurrentSearches: false
            }
        }

        this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.set_projectScanFileIdSelection_searchScanFileIdSelections({
            projectScanFileIdSelection, searchScanFileIdSelections_Set: searchScanFileIdSelections_NewEntries
        })

        for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

            if ( ! searches_YES_ContainScanFile_ProjectSearchId_Set.has( projectSearchId ) ) {
                this._searches_NOT_ContainScanFile_ProjectSearchId_Set.add( projectSearchId )
            }
        }

        return {
            yes__URL_ProjectScanFileId_SearchScanFileIds_In_CurrentSearches: true
        }
    }


    /**
     *  Run on Page Load.   ProjectScanFileId passed in from Project Page and put in DOM
     */
    private _runOnPageLoad_Is_URL_ProjectScanFileId_From_ProjectPage_Populated__Populate_this_searches_NOT_ContainScanFile_ProjectSearchId_Set() : {
        no__URL_Has_ProjectScanFileId_FromProjectPage: boolean
        yes__URL_Has_ProjectScanFileId_FromProjectPage__Yes_ProjectScanFileId_FoundInAnySearches: boolean
        yes__URL_Has_ProjectScanFileId_FromProjectPage__NO_ProjectScanFileId_FoundInAnySearches: boolean
    } {

        const projectScanFileId_NOT_SET = undefined

        let projectScanFileId_FromURL: number = projectScanFileId_NOT_SET
        {
            /**
             * DOM <script> tag has the project_scan_file_id From the Project Page: special "B"..."B" URL value
             */
            let element = document.getElementById("project_scan_file_id_from_url");
            if (!element) {
                throw Error("No DOM element for id 'project_scan_file_id_from_url'");
            }

            const elementString = element.innerHTML

            if ( elementString !== "" ) {

                //  Have a String so process it
                const domparser = new DOMParser()

                try {
                    const doc = domparser.parseFromString(elementString, "text/html")

                    const body = doc.body;

                    const elementString_AsHTML_InnerText = body.innerText;

                    if ( elementString_AsHTML_InnerText !== "" ) {

                        projectScanFileId_FromURL = Number.parseInt(elementString_AsHTML_InnerText)

                        if ( Number.isNaN( projectScanFileId_FromURL ) ) {
                            throw Error( "Value DOM element for id 'project_scan_file_id_from_url' is NOT parsable as Integer." );
                        }
                    }

                } catch (e) {
                    // Not parsable Value so exit

                }
            }
        }

        if ( projectScanFileId_FromURL === projectScanFileId_NOT_SET ) {

            return {  //  EARLY RETURN
                no__URL_Has_ProjectScanFileId_FromProjectPage: true,
                yes__URL_Has_ProjectScanFileId_FromProjectPage__Yes_ProjectScanFileId_FoundInAnySearches: false,
                yes__URL_Has_ProjectScanFileId_FromProjectPage__NO_ProjectScanFileId_FoundInAnySearches: false
            }
        }

        let searchScanFileIdSelections_Set: Set<number> = new Set()

        const searches_YES_ContainScanFile_ProjectSearchId_Set: Set<number> = new Set()

            //  YES Passed in projectScanFileId so use it.
            //  Populate this._selected_projectScanFileId, this._selected_searchScanFileId_Set, searches_YES_ContainScanFile_ProjectSearchId_Set

        for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {
            const scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder = this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.get( projectSearchId )
            if ( ! scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder ) {
                continue // EARLY CONTINUE
            }
            const scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = this._commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId( projectSearchId )
            if ( ! scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder ) {
                continue // EARLY CONTINUE
                // throw new Error("No value from commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId(projectSearchId) for projectSearchId: " + projectSearchId );
            }
            for ( const searchScanFileData of scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_SearchScanFileData_IterableIterator() ) {
                const scanFile_ProjectScanFileId_SearchScanFileId = scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId( searchScanFileData.searchScanFileId )
                if ( ! scanFile_ProjectScanFileId_SearchScanFileId ) {
                    throw new Error( "No value from scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId(searchScanFileData.searchScanFileId) for searchScanFileData.searchScanFileId: " + searchScanFileData.searchScanFileId + ", projectSearchId: " + projectSearchId );
                }

                if ( projectScanFileId_FromURL === scanFile_ProjectScanFileId_SearchScanFileId.projectScanFileId ) {

                    searchScanFileIdSelections_Set.add( scanFile_ProjectScanFileId_SearchScanFileId.searchScanFileId )

                    searches_YES_ContainScanFile_ProjectSearchId_Set.add( projectSearchId )
                }
            }
        }

        if ( searchScanFileIdSelections_Set.size === 0 ) {

            //  projectScanFileId_FromURL NOT FOUND in any searches

            return {  //  EARLY RETURN
                yes__URL_Has_ProjectScanFileId_FromProjectPage__NO_ProjectScanFileId_FoundInAnySearches: true,
                yes__URL_Has_ProjectScanFileId_FromProjectPage__Yes_ProjectScanFileId_FoundInAnySearches: false,
                no__URL_Has_ProjectScanFileId_FromProjectPage: true
            }
        }

        for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

            if ( ! searches_YES_ContainScanFile_ProjectSearchId_Set.has( projectSearchId ) ) {
                this._searches_NOT_ContainScanFile_ProjectSearchId_Set.add( projectSearchId )
            }
        }

        this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.set_projectScanFileIdSelection_searchScanFileIdSelections({
            projectScanFileIdSelection: projectScanFileId_FromURL,
            searchScanFileIdSelections_Set
        })

        //  projectScanFileId_FromURL YES FOUND in any searches

        return {  //  EARLY RETURN
            yes__URL_Has_ProjectScanFileId_FromProjectPage__Yes_ProjectScanFileId_FoundInAnySearches: true,
            yes__URL_Has_ProjectScanFileId_FromProjectPage__NO_ProjectScanFileId_FoundInAnySearches: false,
            no__URL_Has_ProjectScanFileId_FromProjectPage: true
        }
    }


    /**
     *  Run on Page Load.  Compute ProjectScanFileId_SearchScanFileIds_From_CurrentSearches
     */
    private _runOnPageLoad_Set_URL_PageStateObject_ProjectScanFileId_SearchScanFileIds_From_CurrentSearches__Populate_this_searches_NOT_ContainScanFile_ProjectSearchId_Set() : {
        yes__Set_StateObject_ProjectScanFileId_SearchScanFileIds_From_CurrentSearches: boolean
    } {
        const searchScanFileData_Map_SearchScanFileId__Map_Key_ProjectScanFileId: Map<number, Map<number, CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_SingleSearch_SingleScanFile_Entry>> = new Map()

        const projectScanFileId_Array_In_FoundValuesOrder: Array<number> = []

        if ( this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.size > 0 ) {
            for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {
                const scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder = this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.get( projectSearchId )
                if ( ! scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder ) {
                    continue // EARLY CONTINUE
                }
                const scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = this._commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId( projectSearchId )
                if ( ! scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder ) {
                    continue // EARLY CONTINUE
                    // throw new Error("No value from commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId(projectSearchId) for projectSearchId: " + projectSearchId );
                }
                for ( const searchScanFileData of scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_SearchScanFileData_IterableIterator() ) {
                    const scanFile_ProjectScanFileId_SearchScanFileId = scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId( searchScanFileData.searchScanFileId )
                    if ( ! scanFile_ProjectScanFileId_SearchScanFileId ) {
                        throw new Error( "No value from scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId(searchScanFileData.searchScanFileId) for searchScanFileData.searchScanFileId: " + searchScanFileData.searchScanFileId + ", projectSearchId: " + projectSearchId );
                    }

                    const projectScanFileId = scanFile_ProjectScanFileId_SearchScanFileId.projectScanFileId

                    let searchScanFileData_Map_SearchScanFileId = searchScanFileData_Map_SearchScanFileId__Map_Key_ProjectScanFileId.get( projectScanFileId )
                    if ( ! searchScanFileData_Map_SearchScanFileId ) {
                        searchScanFileData_Map_SearchScanFileId = new Map()
                        searchScanFileData_Map_SearchScanFileId__Map_Key_ProjectScanFileId.set( projectScanFileId, searchScanFileData_Map_SearchScanFileId )
                        projectScanFileId_Array_In_FoundValuesOrder.push( projectScanFileId )
                    }
                    searchScanFileData_Map_SearchScanFileId.set( searchScanFileData.searchScanFileId, searchScanFileData )
                }
            }
        }

        if ( searchScanFileData_Map_SearchScanFileId__Map_Key_ProjectScanFileId.size === 0 ) {

            //  NO searchScanFileIdSelection for ANY Searches
            return {  // EARLY RETURN
                yes__Set_StateObject_ProjectScanFileId_SearchScanFileIds_From_CurrentSearches: false
            }
        }

        //  Get ProjectScanFileId and SearchScanData for ProjectScanFileId with most SearchScanData entries, keeping the first entry when count is tied


        let projectScanFileId_FOR_SearchScanFileData_Map_SearchScanFileId__WithMost_Entries: number = undefined
        let searchScanFileData_Map_SearchScanFileId__WithMost_Entries :Map<number, CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_SingleSearch_SingleScanFile_Entry> = undefined

        for ( const projectScanFileId_Entry_In_FoundValuesOrder of projectScanFileId_Array_In_FoundValuesOrder ) {

            const  searchScanFileData_Map_SearchScanFileId__Map_For_ProjectScanFileId = searchScanFileData_Map_SearchScanFileId__Map_Key_ProjectScanFileId.get( projectScanFileId_Entry_In_FoundValuesOrder )
            if ( ! searchScanFileData_Map_SearchScanFileId__Map_For_ProjectScanFileId ) {
                throw Error("searchScanFileData_Map_SearchScanFileId__Map_Key_ProjectScanFileId.get( projectScanFileId_Entry_In_FoundValuesOrder ) returned NOTHING for projectScanFileId_Entry_In_FoundValuesOrder" )
            }

            if ( ! searchScanFileData_Map_SearchScanFileId__WithMost_Entries ) {
                projectScanFileId_FOR_SearchScanFileData_Map_SearchScanFileId__WithMost_Entries = projectScanFileId_Entry_In_FoundValuesOrder
                searchScanFileData_Map_SearchScanFileId__WithMost_Entries = searchScanFileData_Map_SearchScanFileId__Map_For_ProjectScanFileId

            } else if ( searchScanFileData_Map_SearchScanFileId__WithMost_Entries.size < searchScanFileData_Map_SearchScanFileId__Map_For_ProjectScanFileId.size ) {
                projectScanFileId_FOR_SearchScanFileData_Map_SearchScanFileId__WithMost_Entries = projectScanFileId_Entry_In_FoundValuesOrder
                searchScanFileData_Map_SearchScanFileId__WithMost_Entries = searchScanFileData_Map_SearchScanFileId__Map_For_ProjectScanFileId
            }
        }
        if ( ! searchScanFileData_Map_SearchScanFileId__WithMost_Entries ) {
            throw Error("NO Value found for searchScanFileData_Map_SearchScanFileId__WithMost_Entries" )
        }

        let selected_projectScanFileId: number = undefined
        const searchScanFileIdSelections_Set: Set<number> = new Set()
        const searches_YES_ContainScanFile_ProjectSearchId_Set: Set<number> = new Set()

        for ( const searchScanFileData of searchScanFileData_Map_SearchScanFileId__WithMost_Entries.values() ) {

            selected_projectScanFileId = projectScanFileId_FOR_SearchScanFileData_Map_SearchScanFileId__WithMost_Entries
            searchScanFileIdSelections_Set.add( searchScanFileData.searchScanFileId )
            searches_YES_ContainScanFile_ProjectSearchId_Set.add( searchScanFileData.projectSearchId )
        }

        for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

            if ( ! searches_YES_ContainScanFile_ProjectSearchId_Set.has( projectSearchId ) ) {
                this._searches_NOT_ContainScanFile_ProjectSearchId_Set.add( projectSearchId )
            }
        }

        this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.set_projectScanFileIdSelection_searchScanFileIdSelections({
            projectScanFileIdSelection: selected_projectScanFileId,
            searchScanFileIdSelections_Set
        })

        return {
            yes__Set_StateObject_ProjectScanFileId_SearchScanFileIds_From_CurrentSearches: true
        }
    }

    /**
     *  Run on Page Load.  call from componentDidMount
     */
    private _runOnPageLoad_MainLoad() {

        const promises: Array<Promise<void>> = [];

        {
            // across all searches
            {
                {
                    const get_PeptideSequencesHolder_AllForAllSearches_Result =
                        this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root.get__commonData_LoadedFromServer__CommonAcrossSearches().
                        get_commonData_LoadedFromServer_SingleSearch__PeptideSequences_For_MainFilters().
                        get_PeptideSequencesHolder_AllForAllSearches();

                    if ( get_PeptideSequencesHolder_AllForAllSearches_Result.data ) {
                        this._peptideSequences_For_MainFilters_Holder= get_PeptideSequencesHolder_AllForAllSearches_Result.data.peptideSequences_For_MainFilters_Holder
                    } else if ( get_PeptideSequencesHolder_AllForAllSearches_Result.promise ) {
                        const promise = new Promise<void>((resolve, reject) => { try {
                            get_PeptideSequencesHolder_AllForAllSearches_Result.promise.catch(reason => { reject(reason)})
                            get_PeptideSequencesHolder_AllForAllSearches_Result.promise.then( value_get_PeptideSequencesHolder_AllForAllSearches_Result => { try {
                                this._peptideSequences_For_MainFilters_Holder = value_get_PeptideSequencesHolder_AllForAllSearches_Result.peptideSequences_For_MainFilters_Holder
                                resolve()
                            } catch (e) { reportWebErrorToServer.reportErrorObjectToServer({errorException: e}); throw e }})
                        } catch (e) { reportWebErrorToServer.reportErrorObjectToServer({errorException: e}); throw e }})
                        promises.push(promise)
                    } else {
                        throw Error("get_PeptideSequencesHolder_AllForAllSearches_Result no data or promise")
                    }
                }
            }
        }

        for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

            const commonData_LoadedFromServer_PerSearch_For_ProjectSearchId =  // state object populated in constructor
                this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root.get__commonData_LoadedFromServer_PerSearch_For_ProjectSearchId(projectSearchId);
            if ( ! commonData_LoadedFromServer_PerSearch_For_ProjectSearchId ) {
                throw new Error("No value from this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root.get__commonData_LoadedFromServer_PerSearch_For_ProjectSearchId(projectSearchId); for projectSearchId: " + projectSearchId );
            }

            const commonData_LoadedFromServer_SingleSearch__ReportedPeptideId_Based_Data_For_MainFilters = commonData_LoadedFromServer_PerSearch_For_ProjectSearchId.get_commonData_LoadedFromServer_SingleSearch__ReportedPeptideId_Based_Data_For_MainFilters();

            {  //  PSM Table Data

                const get_PSM_TblData_For_ReportedPeptideIdHolder_AllForSearch_Result =
                    commonData_LoadedFromServer_PerSearch_For_ProjectSearchId.get_commonData_LoadedFromServer_SingleSearch__PSM_TblData_For_ReportedPeptideId_For_MainFilters().get_PSM_TblData_For_ReportedPeptideIdHolder_AllForSearch()

                if ( get_PSM_TblData_For_ReportedPeptideIdHolder_AllForSearch_Result.data ) {
                    this._psmTblData_For_ReportedPeptideId_For_MainFilters_Holder_Map_Key_ProjectSearchId.set( projectSearchId, get_PSM_TblData_For_ReportedPeptideIdHolder_AllForSearch_Result.data.psmTblData_For_ReportedPeptideId_For_MainFilters_Holder )
                } else if ( get_PSM_TblData_For_ReportedPeptideIdHolder_AllForSearch_Result.promise ) {

                    const promise = new Promise<void>( (resolve, reject) => {
                        try {
                            get_PSM_TblData_For_ReportedPeptideIdHolder_AllForSearch_Result.promise.catch( reason => {
                                try {
                                    console.warn( "get_PSM_TblData_For_ReportedPeptideIdHolder_AllForSearch_Result.promise.catch: reason: ", reason )
                                    reject(reason);
                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            });
                            get_PSM_TblData_For_ReportedPeptideIdHolder_AllForSearch_Result.promise.then( value => {
                                try {
                                    this._psmTblData_For_ReportedPeptideId_For_MainFilters_Holder_Map_Key_ProjectSearchId.set( projectSearchId, value.psmTblData_For_ReportedPeptideId_For_MainFilters_Holder )
                                    resolve();

                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            });
                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    })
                    promises.push(promise);
                } else {
                    throw Error("get_PSM_TblData_For_ReportedPeptideIdHolder_AllForSearch_Result. neither of 'data' or 'promise' set ");
                }
            }

            {  //  Load Reported Peptide Variable Mods if needed
                { // Replace 'if' with "{" if ( generatedPeptideContents_UserSelections_StateObject && generatedPeptideContents_UserSelections_StateObject.getVariableModifications_Selected() ) {

                    if ( ! this._variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId_Map_Key_ProjectSearchId ) {
                        this._variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId_Map_Key_ProjectSearchId = new Map();
                    }

                    const variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Result =
                        commonData_LoadedFromServer_PerSearch_For_ProjectSearchId.get_commonData_LoadedFromServer_SingleSearch__Variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters().
                        get_Variable_Dynamic_Modifications_At_ReportedPeptide_LevelHolder_AllForSearch();

                    if ( variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Result.data ) {

                        const variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId = (
                            _get_Variable_ModificationsRoundedByReportedPeptideIdPosition_ForSingleProjectSearchId({
                                variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder: variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Result.data.variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder
                            })
                        );
                        this._variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId_Map_Key_ProjectSearchId.set(projectSearchId, variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId)
                    } else if ( variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Result.promise ) {
                        const promise = new Promise<void>( (resolve, reject) => {
                            variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Result.promise.catch(reason => {
                                reject(reason);
                            })
                            variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Result.promise.then(value => { try {
                                const variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId = (
                                    _get_Variable_ModificationsRoundedByReportedPeptideIdPosition_ForSingleProjectSearchId({
                                        variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder: value.variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder
                                    })
                                );
                                this._variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId_Map_Key_ProjectSearchId.set(projectSearchId, variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId)
                                resolve();
                            } catch (e) { reportWebErrorToServer.reportErrorObjectToServer({errorException: e}); throw e }})
                        });

                        promises.push(promise);

                    } else {
                        throw Error("variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Result 'data' 'promise' both NOT have value");
                    }
                }
            }
            {  //  Load PSM Open Mods if needed
                { // Replace 'if' with "{" if ( generatedPeptideContents_UserSelections_StateObject && generatedPeptideContents_UserSelections_StateObject.getOpenModifications_WithLocalization_Selected() ) {

                    if ( ! this._openModifications_On_PSM_For_MainFilters_Holder_Map_Key_ProjectSearchId ) {
                        this._openModifications_On_PSM_For_MainFilters_Holder_Map_Key_ProjectSearchId = new Map();
                    }

                    const get_OpenModifications_On_PSMHolder_AllForSearch_Result =
                        commonData_LoadedFromServer_PerSearch_For_ProjectSearchId.get_commonData_LoadedFromServer_SingleSearch__OpenModifications_On_PSM_For_MainFilters().
                        get_OpenModifications_On_PSMHolder_AllForSearch();

                    if ( get_OpenModifications_On_PSMHolder_AllForSearch_Result.data ) {

                        this._openModifications_On_PSM_For_MainFilters_Holder_Map_Key_ProjectSearchId.set(
                            projectSearchId,
                            get_OpenModifications_On_PSMHolder_AllForSearch_Result.data.openModifications_On_PSM_For_MainFilters_Holder
                        );

                    } else if ( get_OpenModifications_On_PSMHolder_AllForSearch_Result.promise ) {

                        const promise = new Promise<void>( (resolve, reject) => {
                            get_OpenModifications_On_PSMHolder_AllForSearch_Result.promise.catch(reason => {
                                reject(reason);
                            })
                            get_OpenModifications_On_PSMHolder_AllForSearch_Result.promise.then(value => {
                                try {

                                    this._openModifications_On_PSM_For_MainFilters_Holder_Map_Key_ProjectSearchId.set(
                                        projectSearchId, value.openModifications_On_PSM_For_MainFilters_Holder
                                    );

                                    resolve();

                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            });
                        });

                        promises.push(promise);

                    } else {
                        throw Error("get_OpenModifications_On_PSMHolder_AllForSearch_Result 'data' 'promise' both NOT have value");
                    }
                }
            }

            {
                const peptideIds_For_MainFilters_Holder_AllForSearch_Result =
                    commonData_LoadedFromServer_PerSearch_For_ProjectSearchId.get_commonData_LoadedFromServer_SingleSearch__PeptideIds_For_MainFilters().get_PeptideIdsHolder_AllForSearch();

                if ( peptideIds_For_MainFilters_Holder_AllForSearch_Result.data ) {
                    this._peptideIds_For_MainFilters_Holder_Map_Key_ProjectSearchId.set( projectSearchId, peptideIds_For_MainFilters_Holder_AllForSearch_Result.data.peptideIds_For_MainFilters_Holder );
                } else if ( peptideIds_For_MainFilters_Holder_AllForSearch_Result.promise ) {

                    const promise = new Promise<void>( (resolve, reject) => {
                        try {
                            peptideIds_For_MainFilters_Holder_AllForSearch_Result.promise.catch(reason => {
                                reject(reason);
                            })
                            peptideIds_For_MainFilters_Holder_AllForSearch_Result.promise.then(value => {
                                try {
                                    this._peptideIds_For_MainFilters_Holder_Map_Key_ProjectSearchId.set( projectSearchId, value.peptideIds_For_MainFilters_Holder );
                                    resolve();
                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            })
                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    });
                    promises.push(promise);
                } else {
                    throw Error("peptideIds_For_MainFilters_Holder_AllForSearch_Result 'data' or 'promise' both not populated");
                }
            }

            /////////////////////////

            //  From Peptide Page

            {  //  Variable Mods - reportedPeptideIds_HasDynamicModifications

                const get_reportedPeptideIds_HasDynamicModifications_Result = commonData_LoadedFromServer_SingleSearch__ReportedPeptideId_Based_Data_For_MainFilters.get_reportedPeptideIds_HasDynamicModifications();

                if ( get_reportedPeptideIds_HasDynamicModifications_Result.data ) {

                    if ( get_reportedPeptideIds_HasDynamicModifications_Result.data.reportedPeptideIds.size > 0 ) {
                        this._searchesContains_VariableModifications = true;
                    }

                } else if ( get_reportedPeptideIds_HasDynamicModifications_Result.promise ) {

                    const promise = new Promise<void>( (resolve, reject) => {
                        try {
                            get_reportedPeptideIds_HasDynamicModifications_Result.promise.catch( reason => {
                                try {
                                    console.warn( "get_reportedPeptideIds_HasDynamicModifications_Result.promise.catch: reason: ", reason )
                                    reject(reason);
                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            });
                            get_reportedPeptideIds_HasDynamicModifications_Result.promise.then( value => {
                                try {
                                    if ( value.reportedPeptideIds.size > 0 ) {
                                        this._searchesContains_VariableModifications = true;
                                    }
                                    resolve();

                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            });
                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    })
                    promises.push(promise);

                } else {
                    throw Error("get_reportedPeptideIds_HasDynamicModifications_Result. neither of 'data' or 'promise' set ");
                }
            }
            {  //  Open Mods - reportedPeptideIds_AnyPsmHas_OpenModifications

                const get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result = commonData_LoadedFromServer_SingleSearch__ReportedPeptideId_Based_Data_For_MainFilters.get_reportedPeptideIds_AnyPsmHas_OpenModifications();

                if ( get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result.data ) {

                    if ( get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result.data.reportedPeptideIds.size > 0 ) {
                        this._searchesContains_OpenModifications = true;
                    }

                } else if ( get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result.promise ) {

                    const promise = new Promise<void>( (resolve, reject) => {
                        try {
                            get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result.promise.catch( reason => {
                                try {
                                    console.warn( "get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result.promise.catch: reason: ", reason )
                                    reject(reason);
                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            });
                            get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result.promise.then( value => {
                                try {
                                    if ( value.reportedPeptideIds.size > 0 ) {
                                        this._searchesContains_OpenModifications = true;
                                    }
                                    resolve();

                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            });
                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    })
                    promises.push(promise);

                } else {
                    throw Error("get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result. neither of 'data' or 'promise' set ");
                }
            }
            {  // Static Mods
                const get_StaticModsHolder_Result = commonData_LoadedFromServer_PerSearch_For_ProjectSearchId.get_commonData_LoadedFromServer_SingleSearch__StaticModifications().get_StaticModsHolder();

                if ( get_StaticModsHolder_Result.data ) {

                    if ( get_StaticModsHolder_Result.data.staticMods_Holder.get_StaticMods().length > 0 ) {
                        this._searchesContains_StaticModifications = true;
                    }

                } else if ( get_StaticModsHolder_Result.promise ) {

                    const promise = new Promise<void>( (resolve, reject) => {
                        try {
                            get_StaticModsHolder_Result.promise.catch( reason => {
                                try {
                                    console.warn( "get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result.promise.catch: reason: ", reason )
                                    reject(reason);
                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            });
                            get_StaticModsHolder_Result.promise.then( value => {
                                try {
                                    if ( value.staticMods_Holder.get_StaticMods().length > 0 ) {
                                        this._searchesContains_StaticModifications = true;
                                    }
                                    resolve();

                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            });
                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    })
                    promises.push(promise);

                } else {
                    throw Error("get_reportedPeptideIds_AnyPsmHas_OpenModifications_Result. neither of 'data' or 'promise' set ");
                }
            }
        }

        {  //  remove from selection state objects values that are not in the loaded data. (Values that have been for: searches removed, or for values that don't meet new filter cutoffs)

            const promise = purge_FilterSelections_NotIn_CurrentData({
                projectSearchIds : this.props.propsValue.projectSearchIds,
                dataPageStateManager: this.props.propsValue.dataPageStateManager,
                commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root: this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root,
                modificationMass_UserSelections_StateObject : this.props.propsValue.modificationMass_UserSelections_StateObject,
                reporterIonMass_UserSelections_StateObject : this.props.propsValue.reporterIonMass_UserSelections_StateObject,
                proteinPositionFilter_UserSelections_StateObject: this.props.propsValue.proteinPositionFilter_UserSelections_StateObject,
                psm_Charge_Filter_UserSelection_StateObject:  this.props.propsValue.psm_Charge_Filter_UserSelection_StateObject,
                scanFilenameId_On_PSM_Filter_UserSelection_StateObject: this.props.propsValue.scanFilenameId_On_PSM_Filter_UserSelection_StateObject,
                scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject: this.props.propsValue.scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject,
                scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject: this.props.propsValue.scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject
            });

            promises.push( promise );
        }

        if ( promises.length === 0 ) {

            //  No wait for data to load.  Continue to next step
            this._recompute_FullPage_Except_SearchDetails({ initialPageLoad: true });

        } else {
            const promiseAll = Promise.all(promises);
            promiseAll.catch( (reason) => {
                try {
                    console.warn("promise catch: reason: ", reason );
                    throw Error("promise catch: reason: " + reason )
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            });
            promiseAll.then( ( reportedPeptideCoreDataArray ) => {
                try {
                    //  All data loaded.  Continue to next step
                    this._recompute_FullPage_Except_SearchDetails({ initialPageLoad: true });

                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            });
        }
    }

    /**
     *
     */
    private _recompute_FullPage_Except_SearchDetails({ initialPageLoad } : { initialPageLoad : boolean }) {

        const promises : Array<Promise<unknown>> = [];

        let commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder: CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = undefined;

        if ( this._anySearches_Have_ScanFilenames ) {  // _anySearches_Have_ScanFilenames set in constructor

            const promise_ToAdd = new Promise<void>( (resolve, reject) => {
                try {

                    const get_ScanFileDataHolder_Result =
                        this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root.
                        get__commonData_LoadedFromServer__Multiple_ProjectSearchIds().
                        get_commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId().get_ScanFileDataHolder()

                    if ( get_ScanFileDataHolder_Result.data ) {

                        commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = get_ScanFileDataHolder_Result.data.scanFileData_Holder
                        resolve()

                    } else if ( get_ScanFileDataHolder_Result.promise ) {

                        get_ScanFileDataHolder_Result.promise.catch( reason => {
                            try {
                                reject( reason )

                            } catch ( e ) {
                                reportWebErrorToServer.reportErrorObjectToServer( { errorException: e } );
                                throw e;
                            }
                        } );
                        get_ScanFileDataHolder_Result.promise.then( value => {

                            commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = value.scanFileData_Holder;

                            resolve();
                        } )
                    } else {
                        throw Error("get_ScanFileDataHolder_Result no data or promise")
                    }
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            });

            promises.push(promise_ToAdd);
        }

        const promisesAll = Promise.all( promises );

        promisesAll.catch( (reason) => {
            console.warn("promisesAll.catch  reason: " + reason )
            throw Error("promisesAll.catch  reason: " + reason )
        })

        promisesAll.then( (promiseResult) => {
            try {
                this._recompute_FullPage_Except_SearchDetails__SubPart_RunBeforeMain({
                    initialPageLoad,
                    commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder
                });

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        });
    }

    //////

    /**
     *
     */
    private _recompute_FullPage_Except_SearchDetails__SubPart_RunBeforeMain(
        {
            initialPageLoad,
            commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder
        } : {
            initialPageLoad : boolean
            commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder: CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder
        }
    ) : void {
        this._recompute_FullPage_Except_SearchDetails__SubPart_Main({ //  Returned Promise<void> is ignored
            initialPageLoad,
            commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder
        });
    }

    /**
     * Make 'async' so can use 'await'
     *
     *
     * @param initialPageLoad
     * @param proteinPositionFilter_UserSelections_StateObject
     * @param loadedDataPerProjectSearchIdHolder_ForAllProjectSearchIds
     * @param loadedDataCommonHolder
     * @private
     */
    private async _recompute_FullPage_Except_SearchDetails__SubPart_Main(
        {
            initialPageLoad,
            commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder
        } : {
            initialPageLoad : boolean
            commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder: CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder
        }
    ) : Promise<void> {
        try {
            const scanFilenames_Set: Set<string> = new Set()

            const searchScanFileData_For_ProjectScanFileId_Map_Key_ProjectSearchId: Map<number, CommonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_SingleSearch_SingleScanFile_Entry> = new Map()

            for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {
                const scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder = this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.get( projectSearchId )
                if ( ! scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder ) {
                    continue // EARLY CONTINUE
                }
                const scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = this._commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId( projectSearchId )
                if ( ! scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder ) {
                    continue // EARLY CONTINUE
                    // throw new Error("No value from commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId(projectSearchId) for projectSearchId: " + projectSearchId );
                }
                for ( const searchScanFileData of scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_SearchScanFileData_IterableIterator() ) {
                    const scanFile_ProjectScanFileId_SearchScanFileId = scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId( searchScanFileData.searchScanFileId )
                    if ( ! scanFile_ProjectScanFileId_SearchScanFileId ) {
                        throw new Error( "No value from scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId(searchScanFileData.searchScanFileId) for searchScanFileData.searchScanFileId: " + searchScanFileData.searchScanFileId + ", projectSearchId: " + projectSearchId );
                    }
                    if ( this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.get_searchScanFileIdSelections().has( scanFile_ProjectScanFileId_SearchScanFileId.searchScanFileId ) ) {

                        searchScanFileData_For_ProjectScanFileId_Map_Key_ProjectSearchId.set( projectSearchId, searchScanFileData )

                        scanFilenames_Set.add( searchScanFileData.filename )
                    }
                }
            }

            const scanFilenames_Array_Sorted = Array.from( scanFilenames_Set )
            scanFilenames_Array_Sorted.sort()

            const scanFile_Selected_ScanFilenames_CommaDelim = scanFilenames_Array_Sorted.join(", ")

            const {
                searchSubGroup_Ids_Selected,
                searchSubGroup_Are_All_SearchSubGroupIds_Selected,
                searchSubGroup_PropValue,
                modificationMass_UserSelections_ComponentData,
                modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData,
                reporterIons_UserSelections_ComponentData,
                peptideUnique_UserSelection_ComponentData,
                peptideSequence_UserSelections_ComponentData,
                reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds

            } :  {
                searchSubGroup_Ids_Selected : Set<number>
                searchSubGroup_Are_All_SearchSubGroupIds_Selected : boolean
                searchSubGroup_PropValue : SearchSubGroup_In_SearchDetailsAndFilter_Component_DisplayData
                modificationMass_UserSelections_ComponentData : ModificationMass_UserSelections_ComponentData,
                modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData : ModificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData
                reporterIons_UserSelections_ComponentData : ReporterIonMass_UserSelections_ComponentData,
                peptideUnique_UserSelection_ComponentData : PeptideUnique_UserSelection_ComponentData;
                peptideSequence_UserSelections_ComponentData : PeptideSequence_UserSelections_ComponentData,
                reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds : Peptide__single_protein_getReportedPeptideIds_From_SelectionCriteria_AllProjectSearchIds

            }  =
                await ScanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions.compute_FullPage_Except_SearchDetails({

                propsValue : this.props.propsValue,
                projectSearchIds : this.props.propsValue.projectSearchIds,
                commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root : this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root,
                getReportedPeptideIdsForDisplay_AllProjectSearchIds_Object: this.state.getReportedPeptideIdsForDisplay_AllProjectSearchIds_Object,
                modificationMass_UserSelections_StateObject : this.props.propsValue.modificationMass_UserSelections_StateObject,
                modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass : this.props.propsValue.modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass,
                reporterIonMass_UserSelections_StateObject : this.props.propsValue.reporterIonMass_UserSelections_StateObject,
                scanFilenameId_On_PSM_Filter_UserSelection_StateObject : this.props.propsValue.scanFilenameId_On_PSM_Filter_UserSelection_StateObject,
                scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject : this.props.propsValue.scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject,
                scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject : this.props.propsValue.scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject,
                scan_RetentionTime_MZ_UserSelection_StateObject : this.props.propsValue.scan_RetentionTime_MZ_UserSelection_StateObject,
                peptideUnique_UserSelection_StateObject : this.props.propsValue.peptideUnique_UserSelection_StateObject,
                peptideSequence_UserSelections_StateObject : this.props.propsValue.peptideSequence_UserSelections_StateObject,
                peptideSequence_MissedCleavageCount_UserSelections_StateObject : this.props.propsValue.peptideSequence_MissedCleavageCount_UserSelections_StateObject,
                peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject: this.props.propsValue.peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject,
                proteinPositionFilter_UserSelections_StateObject : this.props.propsValue.proteinPositionFilter_UserSelections_StateObject,
                psm_Charge_Filter_UserSelection_StateObject: this.props.propsValue.psm_Charge_Filter_UserSelection_StateObject,
                psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject: this.props.propsValue.psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject
            });


            // Process reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds


            const psmTblData_Array_Map_Key_ScanNumber_Map_Key_ProjectSearchId: Map<number, Map<number, Array<CommonData_LoadedFromServer_SingleSearch__PSM_TblData_For_ReportedPeptideId_For_MainFilters_Holder__ForSinglePsmId>>> = new Map()

            const scanNumbersAll_Set: Set<number> = new Set()

            for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

                const psmTblData_For_ReportedPeptideId_For_MainFilters_Holder = this._psmTblData_For_ReportedPeptideId_For_MainFilters_Holder_Map_Key_ProjectSearchId.get(projectSearchId)
                if ( ! psmTblData_For_ReportedPeptideId_For_MainFilters_Holder ) {
                    throw Error("this._psmTblData_For_ReportedPeptideId_For_MainFilters_Holder_Map_Key_ProjectSearchId.get(projectSearchId) returned NOTHING for projectSearchId: " + projectSearchId )
                }

                const reportedPeptideIds_AndTheir_PSM_IDs__ForProjectSearchId = reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds.get_EntryFor_projectSearchId( projectSearchId )
                if ( ! reportedPeptideIds_AndTheir_PSM_IDs__ForProjectSearchId ) {
                    continue // EARLY CONTINUE
                }


                let psmTblData_Array_Map_Key_ScanNumber = psmTblData_Array_Map_Key_ScanNumber_Map_Key_ProjectSearchId.get(projectSearchId)
                if ( ! psmTblData_Array_Map_Key_ScanNumber ) {
                    psmTblData_Array_Map_Key_ScanNumber = new Map()
                    psmTblData_Array_Map_Key_ScanNumber_Map_Key_ProjectSearchId.set(projectSearchId, psmTblData_Array_Map_Key_ScanNumber)
                }

                for ( const reportedPeptideId_AndIts_PSM_IDs of reportedPeptideIds_AndTheir_PSM_IDs__ForProjectSearchId.get_Entries_IterableIterator() ) {

                    if ( reportedPeptideId_AndIts_PSM_IDs.psmIds_Include ) {

                        for ( const psmId of reportedPeptideId_AndIts_PSM_IDs.psmIds_Include ) {

                            const psmTblData = psmTblData_For_ReportedPeptideId_For_MainFilters_Holder.get_PsmTblData_For_PsmId( psmId )
                            if ( ! psmTblData_For_ReportedPeptideId_For_MainFilters_Holder ) {
                                throw Error("psmTblData_For_ReportedPeptideId_For_MainFilters_Holder.get_PsmTblData_For_PsmId( psmId ) returned NOTHING for psmId: " + psmId )
                            }

                            if ( this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.get_searchScanFileIdSelections().has( psmTblData.searchScanFileId ) ) {
                                let psmTblData_Array = psmTblData_Array_Map_Key_ScanNumber.get( psmTblData.scanNumber )
                                if ( ! psmTblData_Array ) {
                                    psmTblData_Array = []
                                    psmTblData_Array_Map_Key_ScanNumber.set( psmTblData.scanNumber, psmTblData_Array )
                                    psmTblData_Array.push( psmTblData )
                                }
                                scanNumbersAll_Set.add( psmTblData.scanNumber )
                            }
                        }
                    } else {

                        const psmTblData_For_ReportedPeptideId = psmTblData_For_ReportedPeptideId_For_MainFilters_Holder.get_PsmTblData_For_ReportedPeptideId(reportedPeptideId_AndIts_PSM_IDs.reportedPeptideId)
                        if ( ! psmTblData_For_ReportedPeptideId ) {
                            throw Error("psmTblData_For_ReportedPeptideId_For_MainFilters_Holder.get_PsmTblData_For_ReportedPeptideId(reportedPeptideId_AndIts_PSM_IDs.reportedPeptideId) returned NOTHING for reportedPeptideId_AndIts_PSM_IDs.reportedPeptideId: " + reportedPeptideId_AndIts_PSM_IDs.reportedPeptideId )
                        }
                        for ( const psmTblData of psmTblData_For_ReportedPeptideId.get_PsmTblData_Entries_IterableIterator() ) {

                            if ( this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.get_searchScanFileIdSelections().has( psmTblData.searchScanFileId ) ) {
                                let psmTblData_Array = psmTblData_Array_Map_Key_ScanNumber.get( psmTblData.scanNumber )
                                if ( ! psmTblData_Array ) {
                                    psmTblData_Array = []
                                    psmTblData_Array_Map_Key_ScanNumber.set( psmTblData.scanNumber, psmTblData_Array )
                                    psmTblData_Array.push( psmTblData )
                                }
                                scanNumbersAll_Set.add( psmTblData.scanNumber )
                            }
                        }
                    }
                }
            }

            //  Build Display Table Data


            //  Create Table Columns (Header info and Data Info)

            const dataTable_Columns : Array<DataTable_Column> = [];
            const dataTable_Column_DownloadTable_Entries : Array<DataTable_Column_DownloadTable> = [];

            {

                {  // Generated Peptide sequence, including variable mods, etc

                    const displayName = "Scan Number";

                    const dataTable_Column = new DataTable_Column({
                        id : "scan_number", // Used for tracking sort order. Keep short
                        displayName,
                        width : 60,
                        sortable : true
                    });
                    dataTable_Columns.push( dataTable_Column );

                    const dataTable_Column_DownloadTable = new DataTable_Column_DownloadTable({ cell_ColumnHeader_String : displayName });
                    dataTable_Column_DownloadTable_Entries.push( dataTable_Column_DownloadTable );
                }

                for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

                    const searchData_For_ProjectSearchId = this.props.propsValue.dataPageStateManager.get_searchData_SearchName_Etc_Root().get_SearchData_For_ProjectSearchId( projectSearchId )

                    {  // Generated Peptide sequence, including variable mods, etc

                        const searchName_MaxCharacterCount = 50

                        let searchName_OrShortName = searchData_For_ProjectSearchId.searchShortName

                        if ( ! searchName_OrShortName ) {

                            searchName_OrShortName = searchData_For_ProjectSearchId.name
                        }

                        const displayName = "(" + searchData_For_ProjectSearchId.searchId + ") " + searchName_OrShortName;

                        const dataTable_Column = new DataTable_Column( {
                            id: "Peptide_Sequence_" + searchData_For_ProjectSearchId.searchId, // Used for tracking sort order. Keep short
                            displayName,
                            width: 500,
                            sortable: true,
                            // Table cell Style has overflow-x: hidden; text-overflow: ellipsis;  so the nowrap will cause search name to display in table header on single line with ellipsis at end
                            style_override_HeaderRowCell_React: { whiteSpace: "nowrap" },

                            columnHeader_Tooltip_HTML_TitleAttribute: "Search: (" + searchData_For_ProjectSearchId.searchId + ") " + searchData_For_ProjectSearchId.name
                        } );
                        dataTable_Columns.push( dataTable_Column );

                        const dataTable_Column_DownloadTable = new DataTable_Column_DownloadTable( { cell_ColumnHeader_String: displayName } );
                        dataTable_Column_DownloadTable_Entries.push( dataTable_Column_DownloadTable );
                    }
                }
            }

            //  Create Table Body

            const dataTable_DataRowEntries : Array<DataTable_DataRowEntry> = [];

            const scanNumbersAll_Array_InOrder = Array.from( scanNumbersAll_Set )
            limelight__Sort_ArrayOfNumbers_SortArrayInPlace( scanNumbersAll_Array_InOrder )

            let tableRowCounter = 0;

            for ( const scanNumber of scanNumbersAll_Array_InOrder ) {

                tableRowCounter++

                const dataTable_DataRow_ColumnEntries: Array<DataTable_DataRow_ColumnEntry> = [];
                const dataColumns_tableDownload : Array<DataTable_DataRowEntry_DownloadTable_SingleColumn> = [];

                {
                    const valueDisplay = scanNumber.toString();
                    const searchEntriesForColumn : Array<string> = [ valueDisplay ]
                    const searchTableData = new DataTable_DataRow_ColumnEntry_SearchTableData({ searchEntriesForColumn })
                    const dataTable_DataRow_ColumnEntry = new DataTable_DataRow_ColumnEntry({
                        searchTableData,
                        valueDisplay,
                        valueSort: scanNumber
                    });
                    dataTable_DataRow_ColumnEntries.push(dataTable_DataRow_ColumnEntry);

                    const dataTable_DataRowEntry_DownloadTable_SingleColumn = new DataTable_DataRowEntry_DownloadTable_SingleColumn({ cell_ColumnData_String: valueDisplay })
                    dataColumns_tableDownload.push( dataTable_DataRowEntry_DownloadTable_SingleColumn );
                }


                const childOfTableRow_Component_Data_PerSearch_Map_Key_ProjectSearchId: Map<number, ScanFileToSearchesPage_Display_MainTableRow_ChildBlock_Component_Data_SingleSearch> = new Map()

                for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

                    const psm_GeneratedPeptideSequence_Entries_All_ForSearch: Array<string> = []

                    const psmTblData_Array_Map_Key_ScanNumber = psmTblData_Array_Map_Key_ScanNumber_Map_Key_ProjectSearchId.get(projectSearchId)
                    if ( ! psmTblData_Array_Map_Key_ScanNumber ) {

                        //  Create Empty cell
                        {
                            const valueDisplay = "";
                            const searchEntriesForColumn : Array<string> = [ valueDisplay ]
                            const searchTableData = new DataTable_DataRow_ColumnEntry_SearchTableData({ searchEntriesForColumn })
                            const dataTable_DataRow_ColumnEntry = new DataTable_DataRow_ColumnEntry({
                                searchTableData,
                                valueDisplay,
                                valueSort: ""
                            });
                            dataTable_DataRow_ColumnEntries.push(dataTable_DataRow_ColumnEntry);

                            const dataTable_DataRowEntry_DownloadTable_SingleColumn = new DataTable_DataRowEntry_DownloadTable_SingleColumn({ cell_ColumnData_String: valueDisplay })
                            dataColumns_tableDownload.push( dataTable_DataRowEntry_DownloadTable_SingleColumn );
                        }

                        continue  // EARLY CONTINUE
                    }
                    const psmTblData_Array_For_ScanNumber = psmTblData_Array_Map_Key_ScanNumber.get( scanNumber )
                    if ( ! psmTblData_Array_For_ScanNumber ) {

                        //  Create Empty cell
                        {
                            const valueDisplay = "";
                            const searchEntriesForColumn : Array<string> = [ valueDisplay ]
                            const searchTableData = new DataTable_DataRow_ColumnEntry_SearchTableData({ searchEntriesForColumn })
                            const dataTable_DataRow_ColumnEntry = new DataTable_DataRow_ColumnEntry({
                                searchTableData,
                                valueDisplay,
                                valueSort: ""
                            });
                            dataTable_DataRow_ColumnEntries.push(dataTable_DataRow_ColumnEntry);

                            const dataTable_DataRowEntry_DownloadTable_SingleColumn = new DataTable_DataRowEntry_DownloadTable_SingleColumn({ cell_ColumnData_String: valueDisplay })
                            dataColumns_tableDownload.push( dataTable_DataRowEntry_DownloadTable_SingleColumn );
                        }

                        continue  // EARLY CONTINUE
                    }

                    // Create Generated Peptide with Mods for Each PSM

                    const peptideIds_For_MainFilters_Holder = this._peptideIds_For_MainFilters_Holder_Map_Key_ProjectSearchId.get(projectSearchId);
                    if ( ! peptideIds_For_MainFilters_Holder ) {
                        throw Error( "No peptideIds_For_MainFilters_Holder_Map_Key_ProjectSearchId for projectSearchId: " + projectSearchId );
                    }

                    const openModifications_On_PSM_For_MainFilters_Holder = this._openModifications_On_PSM_For_MainFilters_Holder_Map_Key_ProjectSearchId.get( projectSearchId )

                    const childOfTableRow_ComponentData_PsmTblData_Array: Array<ScanFileToSearchesPage_Display_MainTableRow_ChildBlock_Component_Data_SinglePSM> = [] // Array since may be more than one

                    for ( const psmTblData of psmTblData_Array_For_ScanNumber ) {

                        const psm_GeneratedPeptideSequence_Entries: Array<string> = []

                        const psmId = psmTblData.psmId
                        const reportedPeptideId = psmTblData.reportedPeptideId

                        const peptideId = peptideIds_For_MainFilters_Holder.get_PeptideId_For_ReportedPeptideId( reportedPeptideId );
                        if ( ! peptideId ) {
                            const msg = "proteinPage_Display__SingleProtein_Create_GeneratedReportedPeptideListData.ts: No peptideId for reportedPeptideId: " + reportedPeptideId + ", projectSearchId: " + projectSearchId;
                            console.warn(msg);
                            throw Error(msg);
                        }

                        const peptideSequenceString : string = this._peptideSequences_For_MainFilters_Holder.get_PeptideSequence_For_PeptideId( peptideId );
                        if ( ! peptideSequenceString ) {
                            throw Error("proteinPage_Display__SingleProtein_Create_GeneratedReportedPeptideListData.ts: No peptideSequenceString for peptideId: " + peptideId + ", for reportedPeptideId: " + reportedPeptideId + ", projectSearchId: " + projectSearchId );
                        }

                        //  Map<(reported peptide), Map<(position),Set<(mod mass rounded number)>>
                        let variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId: Map<number, Map<number, Set<number>>> = undefined;
                        if ( this._variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId_Map_Key_ProjectSearchId ) {
                            variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId = this._variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId_Map_Key_ProjectSearchId.get( projectSearchId );
                        }

                        let variableModificationsRoundedArray_KeyPosition: Map<number, Set<number>> = undefined;

                        if ( variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId ) {
                            variableModificationsRoundedArray_KeyPosition = variableModificationsRoundedArray_KeyPosition_KeyReportedPeptideId.get( psmTblData.reportedPeptideId );
                        }

                        let psmOpenModificationMassForPsmId: CommonData_LoadedFromServer_SingleSearch__OpenModifications_On_PSM_For_PsmId = undefined

                        const psmOpenModificationMassPerPSM_ForPsmIdMap = openModifications_On_PSM_For_MainFilters_Holder.get_psmOpenModificationMassPerPSM_ForPsmIdMap_For_ReportedPeptideId( reportedPeptideId )
                        if ( psmOpenModificationMassPerPSM_ForPsmIdMap ) {
                            psmOpenModificationMassForPsmId = psmOpenModificationMassPerPSM_ForPsmIdMap.psmOpenModificationMassPerPSM_ForPsmIdMap.get( psmId );
                        }

                        if ( psmOpenModificationMassForPsmId && psmOpenModificationMassForPsmId.openModificationMass_Rounded === 0
                            && this.props.propsValue.modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass.getTreatOpenModMassZeroAsUnmodified_Selection() ) {

                            //  Open Mod Mass Rounded is Zero and User has selected to Treat Open Mod Mass Zero as Unmodified
                            //    So Remove Open Mod Mass from for PSM from Generation of this Generated Reported Peptide for this PSM.

                            psmOpenModificationMassForPsmId = null;
                        }

                        if ( ! psmOpenModificationMassForPsmId ) {

                            //  NO Open Mods for PSM

                            const generatedPeptideString = _generatedPeptideString_For_Single_Psm__For_PeptideSequence_And_Mods({
                                peptideSequenceString,
                                variableModificationsRoundedArray_KeyPosition,
                                open_Modification_Rounded: undefined,
                                open_Modification_Rounded_Position: undefined,
                                open_Modification_Rounded_NoPosition : undefined
                            })

                            psm_GeneratedPeptideSequence_Entries.push( generatedPeptideString )

                        } else {
                            if ( ( ! psmOpenModificationMassForPsmId.positionsMap_KeyPosition ) ) {

                                const generatedPeptideString = _generatedPeptideString_For_Single_Psm__For_PeptideSequence_And_Mods({
                                    peptideSequenceString,
                                    variableModificationsRoundedArray_KeyPosition,
                                    open_Modification_Rounded: undefined,
                                    open_Modification_Rounded_Position: undefined,
                                    open_Modification_Rounded_NoPosition: psmOpenModificationMassForPsmId.openModificationMass_Rounded.toString(),
                                })

                                psm_GeneratedPeptideSequence_Entries.push( generatedPeptideString )

                            } else {

                                for ( const positionMapEntry of psmOpenModificationMassForPsmId.positionsMap_KeyPosition.entries() ) {

                                    const positionEntries_AtPosition = positionMapEntry[ 1 ];

                                    for ( const positionEntry of positionEntries_AtPosition ) {

                                        let open_Modification_Rounded_Position = positionEntry.position;
                                        if ( positionEntry.isNTerminal ) {
                                            open_Modification_Rounded_Position = reportedPeptideDisplay_CreateCommonDisplayString_AcrossSearches_N_TERMINUS_POSITION_INDEX;
                                        } else if ( positionEntry.isCTerminal ) {
                                            open_Modification_Rounded_Position = reportedPeptideDisplay_CreateCommonDisplayString_AcrossSearches_C_TERMINUS_POSITION_INDEX;
                                        }

                                        const generatedPeptideString = _generatedPeptideString_For_Single_Psm__For_PeptideSequence_And_Mods({
                                            peptideSequenceString,
                                            variableModificationsRoundedArray_KeyPosition,
                                            open_Modification_Rounded: psmOpenModificationMassForPsmId.openModificationMass_Rounded,
                                            open_Modification_Rounded_Position,
                                            open_Modification_Rounded_NoPosition: undefined,
                                        })

                                        psm_GeneratedPeptideSequence_Entries.push( generatedPeptideString )
                                    }
                                }
                            }
                        }

                        // for ( const psm_GeneratedPeptideSequence_Entry of psm_GeneratedPeptideSequence_Entries ) {
                        //
                        //
                        // }

                        psm_GeneratedPeptideSequence_Entries.sort()

                        const psm_GeneratedPeptideSequence_Entries_Fmt = psm_GeneratedPeptideSequence_Entries.join(", ")

                        psm_GeneratedPeptideSequence_Entries_All_ForSearch.push( psm_GeneratedPeptideSequence_Entries_Fmt )

                        const component_Data_SinglePSM: ScanFileToSearchesPage_Display_MainTableRow_ChildBlock_Component_Data_SinglePSM = {
                            psmTblData, generatedPeptideString_Array: psm_GeneratedPeptideSequence_Entries
                        }

                        childOfTableRow_ComponentData_PsmTblData_Array.push( component_Data_SinglePSM )
                    }


                    const childOfTableRow_Component_Data_SingleSearch: ScanFileToSearchesPage_Display_MainTableRow_ChildBlock_Component_Data_SingleSearch = {
                        projectSearchId, psmTblData_Array: childOfTableRow_ComponentData_PsmTblData_Array
                    }

                    childOfTableRow_Component_Data_PerSearch_Map_Key_ProjectSearchId.set( projectSearchId, childOfTableRow_Component_Data_SingleSearch )

                    const psm_GeneratedPeptideSequence_Entries_All_ForSearch_CommaDelim_For_Search_Sort_Download = psm_GeneratedPeptideSequence_Entries_All_ForSearch.join(", ")

                    const psm_GeneratedPeptideSequence_Entries_All_ForSearch_ReturnJSX = () => {
                        return (
                            <div>
                                { psm_GeneratedPeptideSequence_Entries_All_ForSearch.map((value, index) => {
                                    return (
                                        <div key={ index } style={ { marginTop: ( index > 0 ) ? 2 : 0 } }>
                                            { value }
                                        </div>
                                    )
                                }) }
                            </div>
                        )
                    }

                    //  Add Table Cell for Search for Scan Number
                    {
                        const searchEntriesForColumn : Array<string> = [ psm_GeneratedPeptideSequence_Entries_All_ForSearch_CommaDelim_For_Search_Sort_Download ]
                        const searchTableData = new DataTable_DataRow_ColumnEntry_SearchTableData({ searchEntriesForColumn })
                        const dataTable_DataRow_ColumnEntry = new DataTable_DataRow_ColumnEntry({
                            searchTableData,
                            valueDisplay_FunctionCallback_Return_JSX_Element_NoDataPassThrough: psm_GeneratedPeptideSequence_Entries_All_ForSearch_ReturnJSX,
                            valueSort: psm_GeneratedPeptideSequence_Entries_All_ForSearch_CommaDelim_For_Search_Sort_Download
                        });
                        dataTable_DataRow_ColumnEntries.push(dataTable_DataRow_ColumnEntry);

                        const valueDisplay = psm_GeneratedPeptideSequence_Entries_All_ForSearch_CommaDelim_For_Search_Sort_Download;

                        const dataTable_DataRowEntry_DownloadTable_SingleColumn = new DataTable_DataRowEntry_DownloadTable_SingleColumn({ cell_ColumnData_String: valueDisplay })
                        dataColumns_tableDownload.push( dataTable_DataRowEntry_DownloadTable_SingleColumn );
                    }

                }

                const dataRow_Get_RowChildContent_Return_ChildContent: DataTable_DataRowEntry__Get_RowChildContent_Return_ChildContent =
                    ( params : DataTable_DataRowEntry__Get_RowChildContent_CallParams ) : JSX.Element => {

                        const componentPropsProp: ScanFileToSearchesPage_Display_MainTableRow_ChildBlock_Component_Props_Prop = {
                            projectSearchIds: this.props.propsValue.projectSearchIds,
                            dataPageStateManager: this.props.propsValue.dataPageStateManager,
                            dataPageStateManager_ProjectSearchIdsTheirFiltersAnnTypeDisplay: this.props.propsValue.dataPageStateManager_ProjectSearchIdsTheirFiltersAnnTypeDisplay,
                            searchDetailsBlockDataMgmtProcessing: this.props.propsValue.searchDetailsBlockDataMgmtProcessing,
                            componentData_PerSearch_Map_Key_ProjectSearchId: childOfTableRow_Component_Data_PerSearch_Map_Key_ProjectSearchId,
                            commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root: this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root,
                            searchDataLookupParamsRoot: this.props.propsValue.searchDetailsBlockDataMgmtProcessing.getSearchDetails_Filters_AnnTypeDisplay_ForWebserviceCalls_AllProjectSearchIds()
                        }

                    return (
                        scanFileToSearchesPage_Display_MainTableRow_ChildBlock__Get_Component({ params_dataTable: params, componentPropsProp })
                    )
                }

                const dataTable_DataRowEntry_DownloadTable = new DataTable_DataRowEntry_DownloadTable({ dataColumns_tableDownload });

                const dataTable_DataRowEntry = new DataTable_DataRowEntry({
                    uniqueId: scanNumber,
                    sortOrder_OnEquals: scanNumber,  //  Preserve original sort order on sort with identical values  //  Must be sortable using Javascript < > comparators
                    columnEntries: dataTable_DataRow_ColumnEntries,
                    dataTable_DataRowEntry_DownloadTable,
                    dataRow_Get_RowChildContent_Return_ChildContent
                });

                dataTable_DataRowEntries.push( dataTable_DataRowEntry );
            }


            const dataTable_RootTableDataObject = new DataTable_RootTableDataObject({
                columns : dataTable_Columns,
                columns_tableDownload: dataTable_Column_DownloadTable_Entries,
                dataTable_DataRowEntries
            });

            const tableOptions = new DataTable_TableOptions({enable_Pagination_Download_Search: true});


            const dataTableId_ThisTable = "Scans to Searches List Root Table";

            const mainDisplay_DataTable_RootTableObject = new DataTable_RootTableObject({
                dataTableId : dataTableId_ThisTable,
                tableOptions,
                tableDataObject : dataTable_RootTableDataObject
            });

            const scanFileToSearches_Page_FiltersDisplay_ComponentData : ScanFileToSearches_Page_FiltersDisplay_ComponentData = {
                projectSearchIds: this.props.propsValue.projectSearchIds,
                dataPageStateManager: this.props.propsValue.dataPageStateManager,
                commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root: this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root,
                modificationMass_UserSelections_StateObject : this.props.propsValue.modificationMass_UserSelections_StateObject,
                reporterIonMass_UserSelections_StateObject : this.props.propsValue.reporterIonMass_UserSelections_StateObject,
                peptideUnique_UserSelection_StateObject : this.props.propsValue.peptideUnique_UserSelection_StateObject,
                peptideSequence_UserSelections_StateObject : this.props.propsValue.peptideSequence_UserSelections_StateObject,
                peptideSequence_MissedCleavageCount_UserSelections_StateObject : this.props.propsValue.peptideSequence_MissedCleavageCount_UserSelections_StateObject,
                peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject: this.props.propsValue.peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject,
                proteinPositionFilter_UserSelections_StateObject : this.props.propsValue.proteinPositionFilter_UserSelections_StateObject,
                scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject: this.props.propsValue.scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject,
                scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject: this.props.propsValue.scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject,
                scanFilenameId_On_PSM_Filter_UserSelection_StateObject : this.props.propsValue.scanFilenameId_On_PSM_Filter_UserSelection_StateObject,
                commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder,
                scan_RetentionTime_MZ_UserSelections_StateObject : this.props.propsValue.scan_RetentionTime_MZ_UserSelection_StateObject,
                psm_Charge_Filter_UserSelection_StateObject: this.props.propsValue.psm_Charge_Filter_UserSelection_StateObject,
                psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject: this.props.propsValue.psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject,
                searchSubGroup_Are_All_SearchSubGroupIds_Selected,
                searchSubGroup_PropValue
            };

            this.setState({
                mainDisplayData_Loaded : true,

                commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder,

                searchSubGroup_Are_All_SearchSubGroupIds_Selected,
                searchSubGroup_PropValue,

                modificationMass_UserSelections_ComponentData,
                modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData,
                reporterIons_UserSelections_ComponentData,
                peptideUnique_UserSelection_ComponentData,
                peptideSequence_UserSelections_ComponentData,
                scanFileToSearches_Page_FiltersDisplay_ComponentData,

                mainDisplay_DataTable_RootTableObject,
                scanFile_Selected_ScanFilenames_CommaDelim
            });

        } catch (e) { reportWebErrorToServer.reportErrorObjectToServer({errorException: e}); throw e }
    }

    /**
     *
     */
    private _modificationMass_ReporterIon__UserSelections__Coordinator_Class__Contents_Changed_Callback() {

        const modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ModificationSelects =
            this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__For_ModificationSelects.get_Current_ModificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class();

        const modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ReporterIonSelections =
            this._modificationMass_ReporterIon__UserSelections__Coordinator_Class__For_ReporterIonSelections.get_Current_ModificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class();

        this.setState({
            modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ModificationSelects,
            modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ReporterIonSelections
        });

        this._modificationMass_Update_modificationMass_UserSelections_ComponentData();

        this._reporterIonMass_Update_reporterIonMass_UserSelections_ComponentData();
    }

    /**
     * User has changed the Search Sub Group Selections.
     *
     * The Page State object has already been updated
     */
	private _searchSubGroup_SelectionsChanged_Callback() : void {
	    try {
	        this._searchSubGroup_CentralStateManagerObjectClass_Changed_UpdateState();

            window.setTimeout( () => {
                try {
                    //  Now update dependent page parts
                    this._updateRestOfPage_ForUserInteraction();

                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 0 );

        } catch( e ) {
            console.warn("Exception caught in _searchSubGroup_SelectionsChanged_Callback()");
            console.warn( e );
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     *
     */
    private _searchSubGroup_CentralStateManagerObjectClass_Changed_UpdateState() {

        const searchSubGroup_PropValue: SearchSubGroup_In_SearchDetailsAndFilter_Component_DisplayData =
            ScanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions.compute_searchSubGroup_PropValue({ propsValue : this.props.propsValue });

        const searchSubGroup_Are_All_SearchSubGroupIds_Selected : boolean =
            ScanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions.compute_searchSubGroup_Are_All_SearchSubGroupIds_Selected({ propsValue : this.props.propsValue });

        this.setState({ searchSubGroup_PropValue, searchSubGroup_Are_All_SearchSubGroupIds_Selected });
    }

    //////////////////

    /**
     * Clear All Selections
     * 
     */
    _clearAllSelections() {
        try {
            this.props.propsValue.searchSubGroup_CentralStateManagerObjectClass.clearAll();

            this.props.propsValue.modificationMass_UserSelections_StateObject.clear_selectedModifications();

            //  NOT Reset this for "Clear All"
            // this.props.propsValue.modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass.clearTreatOpenModMassZeroAsUnmodified_Selection();

            this.props.propsValue.reporterIonMass_UserSelections_StateObject.clear_selectedReporterIons();

            this.props.propsValue.peptideUnique_UserSelection_StateObject.clearPeptideUnique();
        
            this.props.propsValue.peptideSequence_UserSelections_StateObject.clearPeptideSearchStrings();

            this.props.propsValue.peptideSequence_MissedCleavageCount_UserSelections_StateObject.clearAll();

            this.props.propsValue.peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject.clearAll();

            this.props.propsValue.proteinPositionFilter_UserSelections_StateObject.clearSelections();

            this.props.propsValue.scanFilenameId_On_PSM_Filter_UserSelection_StateObject.clearAll();

            this.props.propsValue.scan_RetentionTime_MZ_UserSelection_StateObject.clearAll();

            this.props.propsValue.psm_Charge_Filter_UserSelection_StateObject.clearAll();

            this.props.propsValue.psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject.clearAll();

            this.props.propsValue.scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject.clearAll();

            this.props.propsValue.scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject.clearAll();

            //  Update URL and Page

            window.setTimeout( () => {
                try {
                    this._searchSubGroup_CentralStateManagerObjectClass_Changed_UpdateState();

                    this._selectedModificationsChange_UpdateURL();  //  Update URL
                    this._reporterIonMassesChange_UpdateURL();  //  Update URL
                    this._selectedPeptideUniqueChange_UpdateURL();  //  Update URL
                    this._selectedPeptideSequenceChange_UpdateURL();  //  Update URL

                    window.setTimeout( () => {
                        try {
                            //  Clear modificationMassSelections_AlwaysShow in Modifications Filter On Component when this object reference changes
                            this.setState({ modificationMassSelections_AlwaysShow__ClearOn_ObjectReferenceChange: {} });

                            this._modificationMass_Update_modificationMass_UserSelections_ComponentData();

                            //  NOT Reset this for "Clear All"
                            // this._modificationMass_OpenModMassZeroNotOpenMod_UserSelection_Update_ModificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData_ComponentData();
            
                            this._reporterIonMass_Update_reporterIonMass_UserSelections_ComponentData();

                            this._peptideUnique_Update_PeptideUnique_UserSelection_ComponentData();
            
                            this._peptideSequence_Update_peptideSequence_UserSelections_ComponentData();

                            this._proteinPositionFilter_Update_proteinPositionFilter_UserSelections_Component_Force_ReRender_Object();

                            this._update__peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_Object_Force_ResetToStateObject();

                            this._update__psm_Charge_Filter_UserSelection_Object_Force_ResetToStateObject();

                            this._update__psm_Exclude_IndependentDecoy_PSMs_UserSelection_Object_Force_ResetToStateObject();

                            this._update__scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject();

                            this._update__scanPeak_M_Over_Z__Intensity_Filter_UserSelection_Object_Force_ResetToStateObject()

                            this._update__scanFilenameId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject();

                            this._update__scan_RetentionTime_MZ_UserSelections_Object_Force_ResetToStateObject();

                            this._update__peptideSequence_MissedCleavageCount_UserSelections_Object_Force_ResetToStateObject();

                            window.setTimeout( () => {
                                try {
                                    //  Now update dependent page parts

                                    this._updateRestOfPage_ForUserInteraction();

                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            }, 0 );

                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 0 );

                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 0 );

        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }


    //////////////////

    /**
     * Open Modification Only
     *
     * Add or Change Mass Selection was clicked for Open Modification and this method is called
     *
     * Second open the overlay for Add/Change Mass Selection
     *
     */
    _openModificationMass_OpenUserSelections_Overlay_Override() : void {
        try {
            window.setTimeout( () => {
                //  Now open the overlay

                this._openModificationMass_OpenUserSelections_Overlay_ActualOpenOverlay()

            }, 10 );
        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     * Open Modification Only
     *
     * Second open the overlay for Add/Change Mass Selection
     *
     * called from immediately above method: _openModificationMass_OpenUserSelections_Overlay_Override()
     */
    _openModificationMass_OpenUserSelections_Overlay_ActualOpenOverlay() : void {

        let modificationMass_CommonRounding_ReturnNumber_Local = modificationMass_CommonRounding_ReturnNumber;

        if ( this.props.propsValue.projectSearchIds.length === 1 ) {
            modificationMass_CommonRounding_ReturnNumber_Local = undefined;  // NO rounding for Single Search
        }

        const modificationMass_UserSelections_DisplayMassSelectionOverlay = new ModificationMass_UserSelections_DisplayMassSelectionOverlay({

            variable_Modifications_DISPLAY: false,
            open_Modifications_DISPLAY: true,
            modificationMass_Subpart_Variable_Open_Modifications_UserSelections_StateObject : this.props.propsValue.modificationMass_UserSelections_StateObject.get_OpenModificationSelections(),
            proteinNames: null,
            proteinDescriptions: null,
            proteinSequenceVersionId : null,
            projectSearchIds : this.props.propsValue.projectSearchIds,
            commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root : this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root,
            modificationMass_CommonRounding_ReturnNumber : modificationMass_CommonRounding_ReturnNumber_Local, // Always passed for Experiment - Made a parameter to make easier to copy this code for Protein Page Single Search
            modificationSelectionChanged_Callback: this._openModificationMass_OpenUserSelections_Overlay_SelectionChangedCallback_BindThis
        });

        modificationMass_UserSelections_DisplayMassSelectionOverlay.showModificationMassSelectionDialog();
    }

    /**
     * Open Modification Only
     *
     * Second open the overlay for Add/Change Mass Selection
     *
     * called from immediately above method: _openModificationMass_OpenUserSelections_Overlay_Override()
     */
    _openModificationMass_OpenUserSelections_Overlay_SelectionChangedCallback() : void {

        this._modificationMass_UserSelections_UpdateMadeTo_StateObject_Callback();

        window.setTimeout( () => {
            try {
                //  Clear modificationMassSelections_AlwaysShow in Modifications Filter On Component when this object reference changes
                this.setState({ modificationMassSelections_AlwaysShow__ClearOn_ObjectReferenceChange: {} });

                this._modificationMass_Update_modificationMass_UserSelections_ComponentData_Callback();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 1 );
    }

    //////////////////

    /**
     * Change was made to modification selection.  this.props.propsValue.modificationMass_UserSelections_StateObject has been updated
     *
     * Not called if this._modificationMass_Update_modificationMass_UserSelections_ComponentData_Callback() is called
     */
    _modificationMass_UserSelections_UpdateMadeTo_StateObject_Callback() : void {
        try {
            window.setTimeout( () => {
                try {
                    this._selectedModificationsChange_UpdateURL();  //  Update URL

                    window.setTimeout( () => {
                        try {
                            //  Now update dependent page parts
                            this._updateRestOfPage_ForUserInteraction();

                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 10 );
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 0 );
        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     * Change was made to modification selection.  this.props.propsValue.modificationMass_UserSelections_StateObject has been updated.
     *
     * Need to create new this.state.modificationMass_UserSelections_ComponentData
     *
     * This is called after the Variable Mod overlay has updated the selected variable mods.
     * Need to re-render the modification selection to display any new variable modification masses that were not displayed before
     */
    _modificationMass_Update_modificationMass_UserSelections_ComponentData_Callback() : void {
        try {
            window.setTimeout( () => {
                try {
                    this._selectedModificationsChange_UpdateURL();  //  Update URL

                    window.setTimeout( () => {
                        try {
                            this._modificationMass_Update_modificationMass_UserSelections_ComponentData();

                            window.setTimeout( () => {
                                try {
                                    //  Now update dependent page parts

                                    this._updateRestOfPage_ForUserInteraction();

                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            }, 10 );
                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 10 );
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 10 );
        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     * create new this.state.modificationMass_UserSelections_ComponentData
     */ 
    async _modificationMass_Update_modificationMass_UserSelections_ComponentData() {
        try {
            const modificationMass_UserSelections_ComponentData : ModificationMass_UserSelections_ComponentData =
                await ScanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions.create_ModificationMass_UserSelections_ComponentData({
                    modificationMass_UserSelections_StateObject : this.props.propsValue.modificationMass_UserSelections_StateObject,
                    projectSearchIds : this.props.propsValue.projectSearchIds,
                    commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root : this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root
                });

            this.setState({ modificationMass_UserSelections_ComponentData });

        } catch (e) { reportWebErrorToServer.reportErrorObjectToServer({errorException: e}); throw e }
    }

    /**
     * Change to peptide unique selection, this.props.propsValue.peptideUnique_UserSelection_StateObject
     */
    _updateMadeTo_modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass_Callback() : void {
        try {

            window.setTimeout( () => {
                try {
                    this._modificationMass_OpenModMassZeroNotOpenMod_UserSelection_Update_ModificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData_ComponentData();

                    window.setTimeout( () => {
                        try {
                            //  Now update dependent page parts
                            this._updateRestOfPage_ForUserInteraction();

                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 10 );
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 10 );

        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     * create new this.state.modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData
     */
    async _modificationMass_OpenModMassZeroNotOpenMod_UserSelection_Update_ModificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData_ComponentData() {
        try {
            const modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData : ModificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData =
                await modificationMass_OpenModMassZeroNotOpenMod_UserSelection_Build_ComponentData_ForReactComponent_ReturnPromise({
                    modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass : this.props.propsValue.modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass,
                    projectSearchIds : this.props.propsValue.projectSearchIds,
                    commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root : this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root
                });

            this.setState({ modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData });

        } catch (e) { reportWebErrorToServer.reportErrorObjectToServer({errorException: e}); throw e }
    }

    /**
     * Change to reporter ion selection
     */ 
    _updateMadeTo_reporterIonMass_UserSelections_StateObject_Callback() : void {
        try {
            window.setTimeout( () => {
                try {
                    this._reporterIonMassesChange_UpdateURL();  //  Update URL

                    window.setTimeout( () => {
                        try {
                            //  Now update dependent page parts
                            this._updateRestOfPage_ForUserInteraction();

                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 10 );

                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 10 );

        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     * create new this.state.modificationMass_UserSelections_ComponentData
     */ 
    async _reporterIonMass_Update_reporterIonMass_UserSelections_ComponentData() {
        try {
            const reporterIons_UserSelections_ComponentData : ReporterIonMass_UserSelections_ComponentData = await ScanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions.create_ReporterIons_UserSelections_ComponentData({
                reporterIonMass_UserSelections_StateObject : this.props.propsValue.reporterIonMass_UserSelections_StateObject,
                projectSearchIds : this.props.propsValue.projectSearchIds,
                commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root : this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root
            });

            this.setState({ reporterIons_UserSelections_ComponentData });

        } catch (e) { reportWebErrorToServer.reportErrorObjectToServer({errorException: e}); throw e }
    }

    /**
     * Change to peptide unique selection, this.props.propsValue.peptideUnique_UserSelection_StateObject
     */
    _updateMadeTo_peptideUnique_UserSelection_StateObject_Callback() : void {
        try {
            window.setTimeout( () => {
                try {
                    this._selectedPeptideUniqueChange_UpdateURL();  //  Update URL

                    window.setTimeout( () => {
                        try {
                            this._peptideUnique_Update_PeptideUnique_UserSelection_ComponentData();

                            //  Now update dependent page parts
                            this._updateRestOfPage_ForUserInteraction();

                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 0 );
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 0 );
        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     * create new this.state.peptideUnique_UserSelection_ComponentData
     */
    _peptideUnique_Update_PeptideUnique_UserSelection_ComponentData() {

        const peptideUnique_UserSelection_ComponentData : PeptideUnique_UserSelection_ComponentData = peptideUnique_UserSelection_BuildData_ForReactComponent({
            peptideUnique_UserSelection_StateObject : this.props.propsValue.peptideUnique_UserSelection_StateObject
        });

        this.setState({ peptideUnique_UserSelection_ComponentData });
    }

    /**
     * Change to peptide string selection, this.props.propsValue.peptideSequence_UserSelections_StateObject
     */ 
    _updateMadeTo_peptideSequence_UserSelections_StateObject() : void {
        try {
            window.setTimeout( () => {
                try {
                    this._selectedPeptideSequenceChange_UpdateURL();  //  Update URL

                    window.setTimeout( () => {
                        try {
                            this._peptideSequence_Update_peptideSequence_UserSelections_ComponentData();

                            window.setTimeout( () => {
                                try {
                                    //  Now update dependent page parts
                                    this._updateRestOfPage_ForUserInteraction();

                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            }, 10 );
                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 10 );
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 10 );
        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     * create new this.state.peptideSequence_UserSelections_ComponentData
     */ 
    _peptideSequence_Update_peptideSequence_UserSelections_ComponentData() {

        const peptideSequence_UserSelections_ComponentData : PeptideSequence_UserSelections_ComponentData = ScanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions.create_PeptideSequence_UserSelections_ComponentData({
            peptideSequence_UserSelections_StateObject : this.props.propsValue.peptideSequence_UserSelections_StateObject
        });

        this.setState({ peptideSequence_UserSelections_ComponentData });
    }

    /**
     *
     */
    private _updateMadeTo_peptideSequence_MissedCleavageCount_UserSelections_StateObject_Callback() {

        window.setTimeout( () => {
            try {
                //  Now update dependent page parts

                this._updateRestOfPage_ForUserInteraction();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 10 );
    }

    /**
     *
     */
    private _updateMadeTo_peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject_StateObject_Callback() {

        window.setTimeout( () => {
            try {
                //  Now update dependent page parts

                this._updateRestOfPage_ForUserInteraction();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 10 );
    }

    /**
     * Change to Protein Position Filter Selections, this.props.propsValue.updateMadeTo_proteinPositionFilter_UserSelections_StateObject_Callback
     */
    _updateMadeTo_proteinPositionFilter_UserSelections_StateObject_Callback() : void {
        try {
            window.setTimeout( () => {
                try {
                    this._proteinPositionFilter_Update_proteinPositionFilter_UserSelections_Component_Force_ReRender_Object();

                    window.setTimeout( () => {
                        try {
                            //  Now update dependent page parts
                            this._updateRestOfPage_ForUserInteraction();

                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 0 );

                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 0 );

        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     * create new this.state.proteinPositionFilter_UserSelections_Component_Force_ReRender_Object
     */
    _proteinPositionFilter_Update_proteinPositionFilter_UserSelections_Component_Force_ReRender_Object() {

        this.setState( { proteinPositionFilter_UserSelections_Component_Force_ReRender_Object: {} } );
    }

    /**
     * create new this.state.peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_Object_Force_ResetToStateObject
     */
    private _update__peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_Object_Force_ResetToStateObject() {

        this.setState( { peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_Object_Force_ResetToStateObject: {} } );
    }

    /**
     * create new this.state.scanFilenameId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject
     */
    private _update__scanFilenameId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject() {

        this.setState( { scanFilenameId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject: {} } );
    }

    /**
     * create new this.state.psm_Charge_Filter_UserSelection_Object_Force_ResetToStateObject
     */
    private _update__psm_Charge_Filter_UserSelection_Object_Force_ResetToStateObject() {

        this.setState( { psm_Charge_Filter_UserSelection_Object_Force_ResetToStateObject: {} } );
    }

    /**
     * create new this.state.psm_Exclude_IndependentDecoy_PSMs_UserSelection_Object_Force_ResetToStateObject
     */
    private _update__psm_Exclude_IndependentDecoy_PSMs_UserSelection_Object_Force_ResetToStateObject() {

        this.setState( { psm_Exclude_IndependentDecoy_PSMs_UserSelection_Object_Force_ResetToStateObject: {} } );
    }

    /**
     * create new this.state.scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject
     */
    private _update__scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject() {

        this.setState( { scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject: {} } );
    }

    /**
     * create new this.state.scanPeak_M_Over_Z__Intensity_Filter_UserSelection_Object_Force_ResetToStateObject
     */
    private _update__scanPeak_M_Over_Z__Intensity_Filter_UserSelection_Object_Force_ResetToStateObject() {

        this.setState( { scanPeak_M_Over_Z__Intensity_Filter_UserSelection_Object_Force_ResetToStateObject: {} } );
    }

    /**
     * create new this.state.scan_RetentionTime_MZ_UserSelections_Object_Force_ResetToStateObject
     */
    private _update__scan_RetentionTime_MZ_UserSelections_Object_Force_ResetToStateObject() {

        this.setState( { scan_RetentionTime_MZ_UserSelections_Object_Force_ResetToStateObject: {} } );
    }

    /**
     * create new this.state.peptideSequence_MissedCleavageCount_UserSelections_Object_Force_ResetToStateObject
     */
    private _update__peptideSequence_MissedCleavageCount_UserSelections_Object_Force_ResetToStateObject() {

        this.setState( { peptideSequence_MissedCleavageCount_UserSelections_Object_Force_ResetToStateObject: {} } );
    }

    /////
    /**
     * Change to protein sequence position selection
     */
    _updateMadeTo_generatedPeptideContents_UserSelections_StateObject_Callback() : void {
        try {
            window.setTimeout( () => {
                try {
                    window.setTimeout( () => {
                        try {
                            //  Now update dependent page parts

                            this._updateRestOfPage_ForUserInteraction();

                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 10 );

                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 10 );

        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     *
     */
    private _updateMadeTo_peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_StateObject_Callback() {

        window.setTimeout( () => {
            try {
                //  Now update dependent page parts

                this._updateRestOfPage_ForUserInteraction();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 10 );
    }

    /**
     *
     */
    private _updateMadeTo_scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject_Callback() {

        window.setTimeout( () => {
            try {
                //  Now update dependent page parts

                this._updateRestOfPage_ForUserInteraction();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 10 );
    }

    /**
     *
     */
    private _updateMadeTo_scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject_Callback() {

        window.setTimeout( () => {
            try {
                //  Now update dependent page parts

                this._updateRestOfPage_ForUserInteraction();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 10 );
    }

    /**
     *
     */
    private _updateMadeTo_scanFilenameId_On_PSM_Filter_UserSelection_StateObject_Callback() {

        window.setTimeout( () => {
            try {
                //  Now update dependent page parts

                this._updateRestOfPage_ForUserInteraction();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 10 );
    }

    /**
     *
     */
    private _updateMadeTo_Scan_RetentionTime_MZ_UserSelections_StateObject_Callback() {

        window.setTimeout( () => {
            try {
                //  Now update dependent page parts

                this._updateRestOfPage_ForUserInteraction();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 10 );
    }

    /**
     *
     */
    private _updateMadeTo_psm_Charge_Filter_UserSelection_StateObject_Callback() {
        window.setTimeout( () => {
            try {
                //  Now update dependent page parts

                this._updateRestOfPage_ForUserInteraction();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 10 );
    }

    /**
     *
     */
    private _updateMadeTo_psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject_Callback() {
        window.setTimeout( () => {
            try {
                //  Now update dependent page parts

                this._updateRestOfPage_ForUserInteraction();

            } catch( e ) {
                reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                throw e;
            }
        }, 10 );
    }

	//  Handling Specific Changes by updating the URL

	/**
	 * Update State to URL for Modification selection change (Variable or Static Modifications)
	 */
	_selectedModificationsChange_UpdateURL() {

		const modsSelectedEncodedStateData = this.props.propsValue.modificationMass_UserSelections_StateObject.getEncodedStateData();
		this.props.propsValue.scanFileToSearchesPageRoot_CentralStateManagerObjectClass.setModsSelectedEncodedStateData( { modsSelectedEncodedStateData : modsSelectedEncodedStateData } );
    }

	/**
	 * 
	 */
	_reporterIonMassesChange_UpdateURL() {

		const reporterIonMassesSelectedEncodedStateData = this.props.propsValue.reporterIonMass_UserSelections_StateObject.getEncodedStateData();
		this.props.propsValue.scanFileToSearchesPageRoot_CentralStateManagerObjectClass.setReporterIonMassesSelectedEncodedStateData( { reporterIonMassesSelectedEncodedStateData } );
	}

    /**
     * Update State to URL for Peptide Unique selection change
     */
    _selectedPeptideUniqueChange_UpdateURL() {

        const encodedStateData = this.props.propsValue.peptideUnique_UserSelection_StateObject.getEncodedStateData();
        this.props.propsValue.scanFileToSearchesPageRoot_CentralStateManagerObjectClass.setPeptideUniqueFilterSelectedEncodedStateData({ peptideUniqueFilterSelectedEncodedStateData : encodedStateData });
    }
    
	/**
	 * Update State to URL for Peptide Sequence selection change
	 */
	_selectedPeptideSequenceChange_UpdateURL() {

		const peptideSequenceSelectedEncodedStateData = this.props.propsValue.peptideSequence_UserSelections_StateObject.getEncodedStateData();
		this.props.propsValue.scanFileToSearchesPageRoot_CentralStateManagerObjectClass.setPeptideSequenceFilterSelectedEncodedStateData({ peptideSequenceFilterSelectedEncodedStateData : peptideSequenceSelectedEncodedStateData });
    }

    ////////////////////////////////////////

    //  Handle Update Rest of the page beyond what the user manipulated

	/**
	 * Handle Update Rest of the page beyond what the user manipulated
	 */
	_updateRestOfPage_ForUserInteraction() {
        try {
            window.setTimeout( () => {
                try {
                    this._updateCurrentPeptideFiltersSection();

                    window.setTimeout( () => {
                        try {
                            // Display Updating message
                            this.setState({ updating_Next_reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds_ForPeptideList : true });

                            window.setTimeout( () => {
                                try {
                                    this._updateRestOfPage_ForUserInteraction__After___updateCurrentPeptideFiltersSection(); // Ignore returned Promise

                                } catch( e ) {
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            }, 10 );

                        } catch( e ) {
                            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                            throw e;
                        }
                    }, 10 );
            
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
                    //  Update more parts like protein coverage and peptide list
            }, 10 );

        } catch( e ) {
            reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
            throw e;
        }
    }

    /**
     * Update section above the peptide list that shows the current Peptide Filters
     */
    _updateCurrentPeptideFiltersSection() {

        const scanFileToSearches_Page_FiltersDisplay_ComponentData : ScanFileToSearches_Page_FiltersDisplay_ComponentData = {
            projectSearchIds: this.props.propsValue.projectSearchIds,
            dataPageStateManager: this.props.propsValue.dataPageStateManager,
            commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root: this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root,
            modificationMass_UserSelections_StateObject : this.props.propsValue.modificationMass_UserSelections_StateObject,
            reporterIonMass_UserSelections_StateObject : this.props.propsValue.reporterIonMass_UserSelections_StateObject,
            peptideUnique_UserSelection_StateObject : this.props.propsValue.peptideUnique_UserSelection_StateObject,
            peptideSequence_UserSelections_StateObject : this.props.propsValue.peptideSequence_UserSelections_StateObject,
            peptideSequence_MissedCleavageCount_UserSelections_StateObject : this.props.propsValue.peptideSequence_MissedCleavageCount_UserSelections_StateObject,
            peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject: this.props.propsValue.peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject,
            proteinPositionFilter_UserSelections_StateObject : this.props.propsValue.proteinPositionFilter_UserSelections_StateObject,
            // peptideList_ScanFileToSearchesPage_SingleProtein_FilterOnCounts_psm_UserSelections_StateObject : this.props.propsValue.peptideList_ScanFileToSearchesPage_SingleProtein_FilterOnCounts_psm_UserSelections_StateObject,
            commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder: this.state.commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder,
            scanFilenameId_On_PSM_Filter_UserSelection_StateObject : this.props.propsValue.scanFilenameId_On_PSM_Filter_UserSelection_StateObject,
            scan_RetentionTime_MZ_UserSelections_StateObject : this.props.propsValue.scan_RetentionTime_MZ_UserSelection_StateObject,
            psm_Charge_Filter_UserSelection_StateObject: this.props.propsValue.psm_Charge_Filter_UserSelection_StateObject,
            psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject: this.props.propsValue.psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject,
            scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject: this.props.propsValue.scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject,
            scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject: this.props.propsValue.scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject,
            searchSubGroup_Are_All_SearchSubGroupIds_Selected : this.state.searchSubGroup_Are_All_SearchSubGroupIds_Selected,
            searchSubGroup_PropValue : this.state.searchSubGroup_PropValue
        };

        this.setState({ scanFileToSearches_Page_FiltersDisplay_ComponentData });
    }

    /**
     *
     * 'async'
     */
    async _updateRestOfPage_ForUserInteraction__After___updateCurrentPeptideFiltersSection() : Promise<void> {
        try {
            const searchSubGroup_Ids_Selected : Set<number> = ScanFileToSearchesPage_Display_MainContent_Component_nonClass_Functions.compute_searchSubGroup_Ids_Selected({ propsValue : this.props.propsValue });

            const getReportedPeptideIdsForDisplay_AllProjectSearchIds_result =
                await this.state.getReportedPeptideIdsForDisplay_AllProjectSearchIds_Object.getReportedPeptideIdsForDisplay_AllProjectSearchIds_ReturnPromise({ // External Function Call
                    not_filtered_position_modification_selections : false,
                    proteinSequenceVersionId : null,
                    searchSubGroup_Ids_Selected,
                    proteinSequenceWidget_StateObject : undefined,
                    modificationMass_UserSelections_StateObject : this.props.propsValue.modificationMass_UserSelections_StateObject,
                    modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass: this.props.propsValue.modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass,
                    reporterIonMass_UserSelections_StateObject : this.props.propsValue.reporterIonMass_UserSelections_StateObject,
                    scanFilenameId_On_PSM_Filter_UserSelection_StateObject : this.props.propsValue.scanFilenameId_On_PSM_Filter_UserSelection_StateObject,
                    scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject : this.props.propsValue.scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject,
                    scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject: this.props.propsValue.scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject,
                    scan_RetentionTime_MZ_UserSelection_StateObject : this.props.propsValue.scan_RetentionTime_MZ_UserSelection_StateObject,
                    peptideUnique_UserSelection_StateObject : this.props.propsValue.peptideUnique_UserSelection_StateObject,
                    peptideSequence_UserSelections_StateObject : this.props.propsValue.peptideSequence_UserSelections_StateObject,
                    userSearchString_LocationsOn_ProteinSequence_Root : null,
                    proteinPositionFilter_UserSelections_StateObject : this.props.propsValue.proteinPositionFilter_UserSelections_StateObject,
                    psm_Charge_Filter_UserSelection_StateObject: this.props.propsValue.psm_Charge_Filter_UserSelection_StateObject,
                    psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject: this.props.propsValue.psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject,
                    peptideSequence_MissedCleavageCount_UserSelections_StateObject : this.props.propsValue.peptideSequence_MissedCleavageCount_UserSelections_StateObject,
                    peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject: this.props.propsValue.peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject
                });

            const reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds = getReportedPeptideIdsForDisplay_AllProjectSearchIds_result.reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds;

            window.setTimeout( () => {
                try {
                    // display new data

                    this.setState({
                        updating_Next_reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds_ForPeptideList : false,
                        reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds_ForPeptideList: reportedPeptideIds_AndTheir_PSM_IDs__AllProjectSearchIds
                    });
                } catch( e ) {
                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                    throw e;
                }
            }, 10 );

        } catch (e) { reportWebErrorToServer.reportErrorObjectToServer({errorException: e}); throw e }
    }

    /**
     *
     */
    private _open_ScanFileSelections() {

        this._show_ScanFileSelectionBlock = true

        this.setState({ force_Rerender: {} })

    }

    ////////////////////////////////////////

    /**
     * 
     */    
    render() {

        let setDefaultView_Component : JSX.Element = undefined;

        if ( this.props.propsValue.dataPages_LoggedInUser_CommonObjectsFactory &&  this.props.propsValue.projectSearchIds.length === 1 ) {

            const get_SetDefaultView_Component_React : Get_SetDefaultView_Component_React_Type =
                this.props.propsValue.dataPages_LoggedInUser_CommonObjectsFactory.getFunctionToGet_SetDefaultView_Component_React();

            const param = new SetDefaultView_Component_React_Params({ projectSearchId : this.props.propsValue.projectSearchIds[ 0 ] });
            setDefaultView_Component = get_SetDefaultView_Component_React( param )
        }

        let saveView_Component : JSX.Element = undefined;

        if ( this.state.saveView_Component_React ) {

            //  Create "Save View" Component

            //  variable must start with Capital "S" since is React Component
            const SaveView_Component_React = this.state.saveView_Component_React;
            const saveView_Component_Props_Prop = this.state.saveView_Component_Props_Prop;

            saveView_Component = (

                <React.Fragment>

                    <SaveView_Component_React 
                        propsValue={ saveView_Component_Props_Prop }
                    />

                    <span >&nbsp;</span>

                </React.Fragment>
            );
        }

        //  Only create these once main display data is loaded

        // let filterOn_AND_generatedPeptideContents_UserSelections_Root_Component_Section : JSX.Element = null;
        //
        // if ( this.state.mainDisplayData_Loaded ) {
        //
        //     filterOn_AND_generatedPeptideContents_UserSelections_Root_Component_Section = this._render_filterOn_AND_generatedPeptideContents_UserSelections_Root_Component_Section({  })
        // }

        let searchSubGroup_Ids_Selected : Set<number> = undefined;

        if ( this.props.propsValue.projectSearchIds.length === 1 && this.props.propsValue.dataPageStateManager.get_SearchSubGroups_Root() ) {

            //  Only display for 1 search

            const projectSearchId = this.props.propsValue.projectSearchIds[ 0 ];

            const searchSubGroups_ForProjectSearchId = this.props.propsValue.dataPageStateManager.get_SearchSubGroups_Root().get_searchSubGroups_ForProjectSearchId( projectSearchId );
            if ( ! searchSubGroups_ForProjectSearchId ) {
                const msg = "returned nothing: props.propsValue.dataPageStateManager.get_SearchSubGroups_Root().get_searchSubGroups_ForProjectSearchId( projectSearchId ), projectSearchId: " + projectSearchId;
                console.warn( msg )
                throw Error( msg )
            }

            searchSubGroup_Ids_Selected = searchSubGroup_Get_Selected_SearchSubGroupIds({
                searchSubGroup_CentralStateManagerObjectClass : this.props.propsValue.searchSubGroup_CentralStateManagerObjectClass, searchSubGroups_ForProjectSearchId
            })
        }

        let scanFileSelections_Element: JSX.Element = undefined

        // if ( true ) {
        if  ( this._show_ScanFileSelectionBlock ) {

            const scanFileSections_Entries: Array<{
                scanFilename_Set: Set<string>
                projectScanFileId: number
                searchScanFileId_Set: Set<number>
                searches_YES_ContainScanFile_ProjectSearchId_Set: Set<number>
                searches_NOT_ContainScanFile_ProjectSearchId_Set: Set<number>
            }> = []

            // if ( this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.size > 0 ) {

            for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

                const scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder = this._scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder_Map_Key_ProjectSearchId.get( projectSearchId )
                if ( ! scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder ) {
                    continue // EARLY CONTINUE
                }
                const scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder = this._commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId( projectSearchId )
                if ( ! scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder ) {
                    continue // EARLY CONTINUE
                    // throw new Error("No value from commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_For_ProjectSearchId(projectSearchId) for projectSearchId: " + projectSearchId );
                }
                for ( const searchScanFileData of scanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_SearchScanFileData_IterableIterator() ) {
                    const scanFile_ProjectScanFileId_SearchScanFileId = scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId( searchScanFileData.searchScanFileId )
                    if ( ! scanFile_ProjectScanFileId_SearchScanFileId ) {
                        throw new Error( "No value from scanFile_ProjectScanFileId_SearchScanFileId_All_ForSearch_Holder.get_For_SearchScanFileId(searchScanFileData.searchScanFileId) for searchScanFileData.searchScanFileId: " + searchScanFileData.searchScanFileId + ", projectSearchId: " + projectSearchId );
                    }

                    let found_projectScanFileId = false

                    for ( const scanFileSections_Entry of scanFileSections_Entries ) {
                        if ( scanFileSections_Entry.projectScanFileId && scanFileSections_Entry.projectScanFileId === scanFile_ProjectScanFileId_SearchScanFileId.projectScanFileId ) {
                            found_projectScanFileId = true
                            scanFileSections_Entry.scanFilename_Set.add( searchScanFileData.filename )
                            scanFileSections_Entry.searchScanFileId_Set.add( searchScanFileData.searchScanFileId )
                            scanFileSections_Entry.searches_YES_ContainScanFile_ProjectSearchId_Set.add( projectSearchId )
                        }
                    }

                    if ( ! found_projectScanFileId ) {

                        const scanFilename_Set: Set<string> = new Set()
                        scanFilename_Set.add( searchScanFileData.filename )

                        const searchScanFileId_Set: Set<number> = new Set()
                        searchScanFileId_Set.add( searchScanFileData.searchScanFileId )

                        const searches_YES_ContainScanFile_ProjectSearchId_Set: Set<number> = new Set()
                        searches_YES_ContainScanFile_ProjectSearchId_Set.add( projectSearchId )

                        scanFileSections_Entries.push( {
                            scanFilename_Set,
                            projectScanFileId: scanFile_ProjectScanFileId_SearchScanFileId.projectScanFileId,
                            searchScanFileId_Set,
                            searches_YES_ContainScanFile_ProjectSearchId_Set,
                            searches_NOT_ContainScanFile_ProjectSearchId_Set: undefined
                        } )
                    }
                }
            }

            // }

            //  Set searches_NOT_ContainScanFile_ProjectSearchId_Set
            for ( const scanFileSections_Entry of scanFileSections_Entries ) {

                scanFileSections_Entry.searches_NOT_ContainScanFile_ProjectSearchId_Set = new Set()

                for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {
                    if ( ! scanFileSections_Entry.searches_YES_ContainScanFile_ProjectSearchId_Set.has( projectSearchId ) ) {
                        scanFileSections_Entry.searches_NOT_ContainScanFile_ProjectSearchId_Set.add( projectSearchId )
                    }
                }
            }



            const scanFileSelectionElements: Array<JSX.Element> = []

            let elementCounter = 0

            for ( const scanFileSections_Entry of scanFileSections_Entries ) {

                elementCounter++

                const filenames_Array_Sorted = Array.from( scanFileSections_Entry.scanFilename_Set )
                filenames_Array_Sorted.sort()
                const filenames_CommaDelim = filenames_Array_Sorted.join(", ")

                const element = (
                    <div
                        key={ elementCounter }
                        style={ { marginBottom: 3 } }
                    >
                        <span
                            className=" fake-link "
                            onClick={ event => {
                                try {
                                    this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.set_projectScanFileIdSelection_searchScanFileIdSelections({
                                        projectScanFileIdSelection: scanFileSections_Entry.projectScanFileId,
                                        searchScanFileIdSelections_Set: scanFileSections_Entry.searchScanFileId_Set
                                    })
                                    this._searches_NOT_ContainScanFile_ProjectSearchId_Set = scanFileSections_Entry.searches_NOT_ContainScanFile_ProjectSearchId_Set
                                    this._show_ScanFileSelectionBlock = false

                                    this._recompute_FullPage_Except_SearchDetails({ initialPageLoad: false });

                                } catch( e ) {
                                    console.warn("Exception caught onClick");
                                    console.warn( e );
                                    reportWebErrorToServer.reportErrorObjectToServer( { errorException : e } );
                                    throw e;
                                }
                            } }
                        >
                            { filenames_CommaDelim }
                        </span>
                        { this.props.propsValue.projectScanFileId_ScanFileToSearchesPage_UserSelections_StateObject.get_projectScanFileIdSelection() === scanFileSections_Entry.projectScanFileId ? (
                            <>
                                <span> </span>
                                <span>(current selection)</span>
                            </>
                        ) : null }
                    </div>
                )
                scanFileSelectionElements.push( element )
            }

            scanFileSelections_Element = (
                <div style={ { marginLeft: 30, marginBottom: 20 } }>
                    <div style={ { marginBottom: 10, fontWeight: "bold" } }>
                        Select a scan file:
                    </div>
                    { scanFileSelectionElements }
                </div>
            )
        }

        let scanFile_NOT_In_Searches_Message: JSX.Element = undefined

        {
            if ( this._searches_NOT_ContainScanFile_ProjectSearchId_Set && this._searches_NOT_ContainScanFile_ProjectSearchId_Set.size > 0 ) {

                const element_PerSearch_Array: Array<JSX.Element> = []

                for ( const projectSearchId of this.props.propsValue.projectSearchIds ) {

                    if ( this._searches_NOT_ContainScanFile_ProjectSearchId_Set.has( projectSearchId ) ) {

                        const searchData_For_ProjectSearchId = this.props.propsValue.dataPageStateManager.get_searchData_SearchName_Etc_Root().get_SearchData_For_ProjectSearchId( projectSearchId )

                        const element = (
                            <li key={ projectSearchId }>
                                <span>{ searchData_For_ProjectSearchId.name }</span>
                                <span> </span>
                                <span style={ { whiteSpace: "nowrap" } }>
                                    <span>(</span>
                                    <span>{ searchData_For_ProjectSearchId.searchId }</span>
                                    <span>)</span>
                                </span>
                            </li>
                        )
                        element_PerSearch_Array.push( element )
                    }
                }

                scanFile_NOT_In_Searches_Message = (
                    <div style={ { marginBottom: 20 } }>
                        <div style={ { fontSize: 18, fontWeight: "bold", marginBottom: 7 } }>
                            Searches that do NOT contain the Scan File:
                        </div>
                        <ul style={ { marginLeft: 30 } }>
                            { element_PerSearch_Array }
                        </ul>
                    </div>
                )
            }
        }


        ///////

        return (
            <React.Fragment>

                    {/* Apply a width to this <div> so that the boxes on right stay within viewport when main overlay is widened to exceed viewport.
                        Need to take into account padding in class="view-single-protein-overlay-body" which is currently 20px or read that from DOM element */}

                    {/* Fake 'width' so that grid width not auto fill to width 100%.  Grid will exceed the 80px width to fill the width of the 2 columns.
                            This keeps boxes on right in viewport when main overlay width > viewport width. */}

                        {/*style={ { display: "grid", gridTemplateColumns: "auto min-content", width: 80 } }*/}
                <div ref={ this._div_MainGridAtTop_Ref } >
                
                    {/* display of data above Reported Peptides  */}

                    <div ref={ this._div_MainContent_LeftGridEntry_AtTop_Ref } >
                    
                        {/* Main Content above Reported Peptides  */}

                        <SearchDetailsAndOtherFiltersOuterBlock_Layout>
                            <SearchDetailsAndFilterBlock_MainPage_Root
                                propValue={ this.state.searchDetailsAndFilterBlock_MainPage_Root_Props_PropValue }
                                searchSubGroup_CentralStateManagerObjectClass={ this.props.propsValue.searchSubGroup_CentralStateManagerObjectClass }
                                searchSubGroup_SelectionsChanged_Callback={ this._searchSubGroup_SelectionsChanged_Callback_BindThis }
                                searchSubGroup_ManageGroupNames_Clicked_Callback={ () => { window.alert("searchSubGroup_ManageGroupNames_Clicked_Callback called"); throw Error("callback not handled")} }
                            />
                        </SearchDetailsAndOtherFiltersOuterBlock_Layout>

                        <div style={ { paddingBottom: 15 } }>

                            { setDefaultView_Component }
                            { saveView_Component }

                            <SharePage_Component
                                projectSearchIds={ this.props.propsValue.projectSearchIds }
                            />
                        </div>

                        {/*{ filterOn_AND_generatedPeptideContents_UserSelections_Root_Component_Section }*/}

                    </div>  {/* END: Main Content above Reported Peptides  */}

                </div>  {/* Close display of data above Reported Peptides */}

                {/* Display of Data  */}



                { this._show_NoScanFileData_In_AnySearches ? (

                    <div style={ { fontSize: 18, fontWeight: "bold", marginTop: 20, marginBottom: 40 } }>
                        No scan data imported in any of the searches.
                    </div>

                ) : ( ! this.state.mainDisplayData_Loaded ) ? (

                    <div >
                        <div style={ { marginTop: 20, fontSize: 24, fontWeight: "bold"} }>
                            Loading Data...
                        </div>
                        <div style={ { paddingTop: 40, paddingBottom: 80 } }>
                            <Spinner_Limelight_Component/>
                        </div>
                    </div>

                ) : (
                    <React.Fragment>

                        <div
                            style={ { display: "inline-block" } }  //  display: "inline-block" so can measure width of this div, including width of Peptide table and sub-tables
                            ref={ this._proteinPage_Display__SingleProtein_GeneratedReportedPeptideListSection_Component_React_Container_Ref }> {/* ref to allow measuring width of component */ }

                            { this.state.scanFile_Selected_ScanFilenames_CommaDelim ? (
                                <div style={ { marginBottom: 20 } }>
                                    <span style={ { fontSize: 18, fontWeight: "bold" } }>
                                        <span>Scan File: </span>
                                        <span
                                            title={ this.state.scanFile_Selected_ScanFilenames_CommaDelim.includes( "," ) ? "multiple scan file names since different file names in different searches" : null }
                                        >
                                            { this.state.scanFile_Selected_ScanFilenames_CommaDelim }
                                        </span>
                                    </span>
                                    { this._projectSearchId_Count_GreaterThan_One ? (
                                        <>
                                            <span> </span>
                                            <span
                                                className=" fake-link "
                                                style={ { fontSize: 14 } }
                                                onClick={ event => {
                                                    this._open_ScanFileSelections()
                                                } }
                                            >
                                                Change
                                            </span>
                                        </>
                                    ) : null }
                                </div>
                            ) : null }

                            { scanFileSelections_Element }

                            { scanFile_NOT_In_Searches_Message }


                            <div style={ { marginBottom: 20 } }>
                                <AnnotationTypesToDisplay__MainPageComponent_to_Open_SelectionOverlay__Component
                                    projectSearchIds={ this.props.propsValue.projectSearchIds }
                                    searchDataLookupParameters_Root={ this.state.searchDataLookupParamsRoot }
                                    dataPageStateManager_DataFrom_Server={ this.props.propsValue.dataPageStateManager }
                                />
                            </div>

                            <div style={ { marginBottom: 10, fontSize: 18, fontWeight: "bold" } }>
                                Results by Scan
                            </div>

                            <DataTable_TableRoot tableObject={ this.state.mainDisplay_DataTable_RootTableObject }/>

                        </div>
                    </React.Fragment>
                ) }

            </React.Fragment>

        );
    }

    //////////////////////////////

    /**
     *
     */
    private _render_filterOn_AND_generatedPeptideContents_UserSelections_Root_Component_Section(
        {}: {}
    ): JSX.Element {

        let modificationMass_CommonRounding_ReturnNumber_Param = modificationMass_CommonRounding_ReturnNumber;

        return (

            <React.Fragment>

                <div>

                    <div className=" filter-common-block-selection-container-block yes-section-labels ">

                        {/* Display of User Selected filtering on  */}

                        <ScanFileToSearches_Page_FiltersDisplay
                            scanFileToSearches_Page_FiltersDisplay_ComponentData={ this.state.scanFileToSearches_Page_FiltersDisplay_ComponentData }
                            clearAllFiltersClickHandler={ this._clearAllSelections_BindThis }
                        />

                        {/* Filter On ... */}

                        <FilterSection_DataPage_ShowHide_ExpandCollapse_Container_Component>   {/*  Show/Hide the filters */}


                            <FilterOn_SearchProgramsGroup_ConditionalRender_Component
                                searchSubGroup_In_SearchDetailsAndFilter_Component_DisplayData={ this.state.searchSubGroup_PropValue }
                                anySearches_Have_ScanFilenames={ this._anySearches_Have_ScanFilenames }
                                commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder={ this.state.commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder }
                            >

                                {/*  Section Label  */}

                                <div className=" section-label " style={ { gridColumn: "1/-1" } }>Search Filters
                                </div>

                                { (
                                    this._anySearches_Have_ScanFilenames
                                    && (
                                        ! ( this.state.commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder
                                            && this.state.commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder.get_total_SearchScanFileCount() === 1 ) )
                                ) ? (

                                    //  Show Scan Filename Selector

                                    <ScanFilenameId_On_PSM_Filter_UserSelection_Component
                                        allSearches_Have_ScanFilenames={ this._allSearches_Have_ScanFilenames }
                                        projectSearchIds={ this.props.propsValue.projectSearchIds }
                                        commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder={ this.state.commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder }
                                        scanFilenameId_On_PSM_Filter_UserSelection_StateObject={ this.props.propsValue.scanFilenameId_On_PSM_Filter_UserSelection_StateObject }
                                        scanFilenameId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject={ this.state.scanFilenameId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject }
                                        updateMadeTo_scanFilenameId_On_PSM_Filter_UserSelection_StateObject_Callback={ this._updateMadeTo_scanFilenameId_On_PSM_Filter_UserSelection_StateObject_Callback_BindThis }
                                    />

                                ): null}

                                <SearchSubGroup_In_SingleProtein_FilterOn_Block_Root_Component
                                    projectSearchId={ this.props.propsValue.projectSearchIds[0] }
                                    dataPageStateManager={ this.props.propsValue.dataPageStateManager }
                                    displayData={ this.state.searchSubGroup_PropValue }
                                    searchSubGroup_CentralStateManagerObjectClass={ this.props.propsValue.searchSubGroup_CentralStateManagerObjectClass }
                                    searchSubGroup_SelectionsChanged_Callback={ this._searchSubGroup_SelectionsChanged_Callback_BindThis }
                                    searchSubGroup_ManageGroupNames_Clicked_Callback={ undefined }
                                    limelight_Colors_For_SingleSearch__SubSearches={ undefined }  //  Only for QC Page
                                />

                            </FilterOn_SearchProgramsGroup_ConditionalRender_Component>

                            {/*  Section Label  */}

                            <div className=" section-label " style={ { gridColumn: "1/-1" } }>Modification Filters
                            </div>

                            <ModificationMass_UserSelections_Root
                                modificationMassSelections_AlwaysShow__ClearOn_ObjectReferenceChange={ this.state.modificationMassSelections_AlwaysShow__ClearOn_ObjectReferenceChange }
                                openModification_OpenSelectMassOverlay_Override_Callback={ this._openModificationMass_OpenUserSelections_Overlay_Override_BindThis }
                                modificationMass_UserSelections_ComponentData={ this.state.modificationMass_UserSelections_ComponentData } // Only updated when new updated need to push from above
                                modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class={ this.state.modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ModificationSelects }
                                modificationMass_UserSelections_StateObject={ this.props.propsValue.modificationMass_UserSelections_StateObject } // Updated in the component
                                modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData={ this.state.modificationMass_OpenModMassZeroNotOpenMod_UserSelection_ComponentData } // Only updated when new updated need to push from above
                                modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass={ this.props.propsValue.modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass } // Updated in the component
                                updateMadeTo_modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass_Callback={ this._updateMadeTo_modificationMass_OpenModMassZeroNotOpenMod_UserSelection__CentralStateManagerObjectClass_Callback_BindThis }
                                proteinSequenceVersionId={ null }
                                projectSearchIds={ this.props.propsValue.projectSearchIds }
                                proteinNames={ null }
                                proteinDescriptions={ null }
                                modificationMass_CommonRounding_ReturnNumber={ modificationMass_CommonRounding_ReturnNumber_Param } // Always passed for Experiment - Made a parameter to make easier to copy this code for Protein Page Single Search
                                updateMadeTo_modificationMass_UserSelections_StateObject_Callback={ this._modificationMass_UserSelections_UpdateMadeTo_StateObject_Callback_BindThis } // this.props.propsValue.modificationMass_UserSelections_StateObject has been updated.
                                update_modificationMass_UserSelections_ComponentData_Callback={ this._modificationMass_Update_modificationMass_UserSelections_ComponentData_Callback_BindThis } // create new this.state.modificationMass_UserSelections_ComponentData
                            />

                            {/*  Section Label  */}

                            <div className=" section-label " style={ { gridColumn: "1/-1" } }>PSM Filters
                            </div>

                            <ReporterIonMass_UserSelections
                                reporterIons_UserSelections_ComponentData={ this.state.reporterIons_UserSelections_ComponentData }
                                modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class={ this.state.modificationMass_ReporterIon__UserSelections__Coordinated_ReactStateData_Class__For_ReporterIonSelections }
                                reporterIonMass_UserSelections_StateObject={ this.props.propsValue.reporterIonMass_UserSelections_StateObject }
                                updateMadeTo_reporterIonMass_UserSelections_StateObject_Callback={ this._updateMadeTo_reporterIonMass_UserSelections_StateObject_Callback_BindThis }
                            />

                            { ( this._anySearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData ) ? (

                                <Scan_RetentionTime_MZ_UserSelections_Component
                                    allSearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData={ this._allSearches_Have_PSM_RetentionTime_Precursor_MZ_OR_ScanData }
                                    projectSearchIds={ this.props.propsValue.projectSearchIds }
                                    scan_RetentionTime_MZ_UserSelections_StateObject={ this.props.propsValue.scan_RetentionTime_MZ_UserSelection_StateObject }
                                    scan_RetentionTime_MZ_UserSelections_Object_Force_ResetToStateObject={ this.state.scan_RetentionTime_MZ_UserSelections_Object_Force_ResetToStateObject }
                                    updateMadeTo_scan_RetentionTime_MZ_UserSelections_StateObject_Callback={ this._updateMadeTo_Scan_RetentionTime_MZ_UserSelections_StateObject_Callback_BindThis }
                                />

                            ): null}

                            { ( this._allSearches_Have_ScanData ) ? (

                                // Show Scan Peak Filter

                                <ScanPeak_M_Over_Z__Intensity_Filter_UserSelection_Component
                                    scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject={ this.props.propsValue.scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject }
                                    projectSearchIds={ this.props.propsValue.projectSearchIds }
                                    dataPageStateManager={ this.props.propsValue.dataPageStateManager }
                                    scanPeak_M_Over_Z__Intensity_Filter_UserSelection_Object_Force_ResetToStateObject={ this.state.scanPeak_M_Over_Z__Intensity_Filter_UserSelection_Object_Force_ResetToStateObject }
                                    updateMadeTo_scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject_Callback={ this._updateMadeTo_scanPeak_M_Over_Z__Intensity_Filter_UserSelection_StateObject_Callback_BindThis }
                                />

                            ) : null }

                            <Psm_Charge_Filter_UserSelection_Container_Component
                                projectSearchIds={ this.props.propsValue.projectSearchIds }
                                psm_Charge_Filter_UserSelection_StateObject={ this.props.propsValue.psm_Charge_Filter_UserSelection_StateObject }
                                psm_Charge_Filter_UserSelection_Object_Force_ResetToStateObject={ this.state.psm_Charge_Filter_UserSelection_Object_Force_ResetToStateObject }
                                updateMadeTo_psm_Charge_Filter_UserSelection_StateObject_Callback={ this._updateMadeTo_psm_Charge_Filter_UserSelection_StateObject_Callback_BindThis }
                                commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root={ this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root }
                            />

                            { ( this.props.propsValue.dataPageStateManager.get_DataPage_common_Searches_Flags().is__anyPsmHas_IsIndependentDecoy_True__TrueForAnySearch() ) ? (

                                <Psm_Exclude_IndependentDecoy_PSMs_UserSelection
                                    psm_Exclude_IndependentDecoy_PSMs_UserSelection_StateObject={ this.props.propsValue.psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject }
                                    psm_Exclude_IndependentDecoy_PSMs_UserSelection_Object_Force_ResetToStateObject={ this.state.psm_Exclude_IndependentDecoy_PSMs_UserSelection_Object_Force_ResetToStateObject }
                                    updateMadeTo_Psm_Exclude_IndependentDecoy_PSMs_UserSelection_StateObject_Callback={ this._updateMadeTo_psm_Exclude_IndependentDecoy_PSMs_Filter_UserSelection_StateObject_Callback_BindThis }
                                />
                            ) : null
                            }

                            {/*<PeptideList_ScanFileToSearchesPage_SingleProtein_FilterOnCounts_psm_UserSelections_Component*/}
                            {/*    peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_StateObject={ this.props.propsValue.peptideList_ScanFileToSearchesPage_SingleProtein_FilterOnCounts_psm_UserSelections_StateObject }*/}
                            {/*    peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_Object_Force_ResetToStateObject={ this.state.peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_Object_Force_ResetToStateObject }*/}
                            {/*    updateMadeTo_peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_StateObject_Callback={*/}
                            {/*        this._updateMadeTo_peptideList_SingleProtein_FilterOnCounts_psm_UserSelections_StateObject_Callback_BindThis*/}
                            {/*    }*/}
                            {/*/>*/}

                            {/*  Show Scan Number with Scan Filename or Search Selector  */}

                            <ScanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection__Component
                                projectSearchIds={ this.props.propsValue.projectSearchIds }
                                dataPageStateManager={ this.props.propsValue.dataPageStateManager }
                                commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder={ this.state.commonData_LoadedFromServer_MultipleSearches__ScanFile_SearchScanFileId_ScanFilename_ScanFileId_Holder }
                                scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject={ this.props.propsValue.scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject }
                                scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject={ this.state.scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_Object_Force_ResetToStateObject }
                                updateMadeTo_scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject_Callback={ this._updateMadeTo_scanNumber_ScanFilenameId_ProjectSearchId_On_PSM_Filter_UserSelection_StateObject_Callback_BindThis }
                            />

                            {/*  Section Label  */}

                            <div className=" section-label " style={ { gridColumn: "1/-1" } }>Peptide and Protein Filters
                            </div>

                            <PeptideUnique_UserSelection
                                peptideUnique_UserSelection_ComponentData={ this.state.peptideUnique_UserSelection_ComponentData }
                                peptideUnique_UserSelection_StateObject={ this.props.propsValue.peptideUnique_UserSelection_StateObject }
                                updateMadeTo_peptideUnique_UserSelection_StateObject_Callback={ this._updateMadeTo_peptideUnique_UserSelection_StateObject_Callback_BindThis }
                            />

                            <PeptideSequence_UserSelections
                                peptideSequence_UserSelections_ComponentData={ this.state.peptideSequence_UserSelections_ComponentData }
                                peptideSequence_UserSelections_StateObject={ this.props.propsValue.peptideSequence_UserSelections_StateObject }
                                proteinSequenceString={ null }
                                updateMadeTo_peptideSequence_UserSelections_StateObject_New_UserSearchString_LocationsOn_ProteinSequence_Root_Callback={ null }
                                updateMadeTo_peptideSequence_UserSelections_StateObject_Callback={ this._updateMadeTo_peptideSequence_UserSelections_StateObject_Callback_BindThis }
                            />

                            <PeptideSequence_MissedCleavageCount_UserSelections_Component
                                projectSearchIds={ this.props.propsValue.projectSearchIds }
                                peptideSequence_MissedCleavageCount_UserSelections_StateObject={ this.props.propsValue.peptideSequence_MissedCleavageCount_UserSelections_StateObject }
                                peptideSequence_MissedCleavageCount_UserSelections_Object_Force_ResetToStateObject={ this.state.peptideSequence_MissedCleavageCount_UserSelections_Object_Force_ResetToStateObject }
                                updateMadeTo_peptideSequence_MissedCleavageCount_UserSelections_StateObject_Callback={ this._updateMadeTo_peptideSequence_MissedCleavageCount_UserSelections_StateObject_Callback_BindThis }
                            />

                            <PeptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_Component
                                peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject={ this.props.propsValue.peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject }
                                peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_Object_Force_ResetToStateObject={ this.state.peptideSequence_MissedCleavageCount_UserSelections_Object_Force_ResetToStateObject }
                                updateMadeTo_peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject_Callback={ this._updateMadeTo_peptideMeetsDigestion_AKA_TrypticPeptide_Etc_UserSelections_StateObject_StateObject_Callback_BindThis }
                            />

                            <ProteinPositionFilter_UserSelections__GetsProteinData
                                proteinPositionFilter_UserSelections_Component_Force_ReRender_Object={ this.state.proteinPositionFilter_UserSelections_Component_Force_ReRender_Object }
                                proteinPositionFilter_UserSelections_StateObject={ this.props.propsValue.proteinPositionFilter_UserSelections_StateObject }
                                updateMadeTo_proteinPositionFilter_UserSelections_StateObject_Callback={ this._updateMadeTo_proteinPositionFilter_UserSelections_StateObject_Callback_BindThis }
                                commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root={ this.state.commonData_LoadedFromServer_PerSearch_Plus_SomeAssocCommonData__Except_ModMainPage__Root }
                                projectSearchIds={ this.props.propsValue.projectSearchIds }
                            />

                            <GeneratedPeptideContents_UserSelections_Root_Component
                                generatedPeptideContents_UserSelections_StateObject={ this.props.propsValue.generatedPeptideContents_UserSelections_StateObject }
                                searchContains_VariableModifications={ this._searchesContains_VariableModifications }
                                searchContains_OpenModifications={ this._searchesContains_OpenModifications }
                                searchContains_StaticModifications={ this._searchesContains_StaticModifications }
                                updateMadeTo_generatedPeptideContents_UserSelections_StateObject_Callback={ this._updateMadeTo_generatedPeptideContents_UserSelections_StateObject_Callback_BindThis  }
                            />

                        </FilterSection_DataPage_ShowHide_ExpandCollapse_Container_Component>

                    </div>

                </div>

            </React.Fragment>
        )
    }

}

////////////////////////
////////////////////////
////////////////////////

//  NON Class Functions



////////////////////////////////////

/**
 * Get Variable Modifications (rounded) Strings: By Reported Peptide Id and Position _ For Single Project Search Id
 *
 * @returns  Map<(reported peptide), Map<(position),Set<(mod mass rounded numbers)>>
 */
const _get_Variable_ModificationsRoundedByReportedPeptideIdPosition_ForSingleProjectSearchId = function(
    {
        variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder
    } : {
        variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder: CommonData_LoadedFromServer_SingleSearch__Variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder

    }
) :  Map<number, Map<number, Set<number>>>

{
    const modsRoundedSet_KeyPosition_KeyReportedPeptideId : Map<number, Map<number, Set<number>>> = new Map();

    const reportedPeptideIds_Set: Set<number> = new Set()

    for ( const entry of variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder.get_Variable_Dynamic_ModificationsOnReportedPeptide_Entries() ) {
        for ( const entry2 of entry ) {
            reportedPeptideIds_Set.add( entry2.reportedPeptideId )
        }
    }

    for ( const reportedPeptideId of reportedPeptideIds_Set ) {

        _process_VariableModifications_ForSingleReportedPeptideId({ reportedPeptideId,  variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder, modsRoundedSet_KeyPosition_KeyReportedPeptideId });
    }

    return modsRoundedSet_KeyPosition_KeyReportedPeptideId;
}

/**
 *
 */
const _process_VariableModifications_ForSingleReportedPeptideId = function (
    {
        reportedPeptideId,
        variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder,
        modsRoundedSet_KeyPosition_KeyReportedPeptideId
    } : {
        reportedPeptideId : number
        variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder: CommonData_LoadedFromServer_SingleSearch__Variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder
        modsRoundedSet_KeyPosition_KeyReportedPeptideId : Map<number, Map<number, Set<number>>>
    }
) : void {

    let modsRoundedSet_KeyPosition = modsRoundedSet_KeyPosition_KeyReportedPeptideId.get(reportedPeptideId);
    if (!modsRoundedSet_KeyPosition) {
        modsRoundedSet_KeyPosition = new Map();
        modsRoundedSet_KeyPosition_KeyReportedPeptideId.set(reportedPeptideId, modsRoundedSet_KeyPosition);
    }

    const dynamicModificationsOnReportedPeptideArray = variable_Dynamic_Modifications_At_ReportedPeptide_Level_For_MainFilters_Holder.get_Variable_Dynamic_ModificationsOnReportedPeptide_For_ReportedPeptideId(reportedPeptideId);
    if (dynamicModificationsOnReportedPeptideArray) {

        //  Have Mods for this reportedPeptideId
        for (const dynamicModificationOnReportedPeptide of dynamicModificationsOnReportedPeptideArray) {

            //   is_N_Terminal and is_C_Terminal
            const is_N_Terminal = dynamicModificationOnReportedPeptide.is_N_Terminal;
            const is_C_Terminal = dynamicModificationOnReportedPeptide.is_C_Terminal;

            const mass = dynamicModificationOnReportedPeptide.mass;
            let positionOnReportedPeptide = dynamicModificationOnReportedPeptide.position;

            if ( is_N_Terminal ) {

                positionOnReportedPeptide = reportedPeptideDisplay_CommonValue_AcrossSearches_N_TERMINUS_POSITION_INDEX;

            } else if ( is_C_Terminal ) {

                positionOnReportedPeptide = reportedPeptideDisplay_CommonValue_AcrossSearches_C_TERMINUS_POSITION_INDEX;
            }

            let modsRoundedSet = modsRoundedSet_KeyPosition.get(positionOnReportedPeptide);
            if (!modsRoundedSet) {
                modsRoundedSet = new Set();
                modsRoundedSet_KeyPosition.set(positionOnReportedPeptide, modsRoundedSet);
            }

            const massRounded = modificationMass_CommonRounding_ReturnNumber(mass);  // Call external function
            modsRoundedSet.add(massRounded);
        }
    }
}

///////////////

const _generatedPeptideString_For_Single_Psm__For_PeptideSequence_And_Mods = function (
    {
        peptideSequenceString,
        variableModificationsRoundedArray_KeyPosition,
        open_Modification_Rounded,
        open_Modification_Rounded_Position,
        open_Modification_Rounded_NoPosition
    } : {
        peptideSequenceString : string
        variableModificationsRoundedArray_KeyPosition :  Map<number, Set<number>>
        open_Modification_Rounded : number
        open_Modification_Rounded_Position : number
        open_Modification_Rounded_NoPosition : string
    }
) {

    //  First combine all positional mods together into single map since will display all as Variable Mods in '[' ']'

    const modifications_combine_temp : Map<number, Array<{ massNumber : number, massString : string }>> = new Map();

    if ( variableModificationsRoundedArray_KeyPosition ) {
        for ( const entry of variableModificationsRoundedArray_KeyPosition.entries() ) {
            const position : number = entry[ 0 ];
            const massesNumber : Set<number> = entry[ 1 ];

            let modifications_combine_temp_Entry = modifications_combine_temp.get( position );
            if ( ! modifications_combine_temp_Entry ) {
                modifications_combine_temp_Entry = new Array<{massNumber: number; massString: string}>()
                modifications_combine_temp.set( position, modifications_combine_temp_Entry );
            }
            for ( const massNumber of massesNumber ) {
                const massString = modificationMass_CommonRounding_ReturnString( massNumber );
                modifications_combine_temp_Entry.push({massNumber, massString})
            }
        }
    }

    if ( open_Modification_Rounded !== undefined && open_Modification_Rounded !== null ) {

        let modifications_combine_temp_Entry = modifications_combine_temp.get( open_Modification_Rounded_Position );
        if ( ! modifications_combine_temp_Entry ) {
            modifications_combine_temp_Entry = new Array<{massNumber: number; massString: string}>()
            modifications_combine_temp.set( open_Modification_Rounded_Position, modifications_combine_temp_Entry );
        }
        const massString = modificationMass_CommonRounding_ReturnString( open_Modification_Rounded );
        modifications_combine_temp_Entry.push({massNumber : open_Modification_Rounded, massString})
    }

    const variable_Modifications_RoundedArray_KeyPosition_FinalForFunctionCall : Map<number, Array<string>> = new Map();

    for (const modifications_combine_temp_Entry of modifications_combine_temp.entries()) {
        const modifications_combine_tempKey = modifications_combine_temp_Entry[0];
        const modsRounded_ObjectsArray = modifications_combine_temp_Entry[1];

        modsRounded_ObjectsArray.sort((a, b) => {
            if (a.massNumber < b.massNumber) {
                return -1;
            } else if (a.massNumber > b.massNumber) {
                return 1;
            } else {
                return 0;
            }
        });
        const modsRoundedStringsArray : Array<string> = [];
        for (const modRounded of modsRounded_ObjectsArray) {
            const modRoundedString = modRounded.massString.toString();
            modsRoundedStringsArray.push(modRoundedString);
        }
        variable_Modifications_RoundedArray_KeyPosition_FinalForFunctionCall.set(modifications_combine_tempKey, modsRoundedStringsArray);
    }


    //   Call external function
    const peptideSequenceDisplay = reportedPeptideDisplay_CreateCommonDisplayString_AcrossSearches({
        peptideSequence : peptideSequenceString,
        variable_Modifications_RoundedArray_KeyPosition: variable_Modifications_RoundedArray_KeyPosition_FinalForFunctionCall,
        open_Modification_Rounded : undefined,
        open_Modification_Rounded_Position : undefined,
        open_Modification_Rounded_NoPosition,
        staticModificationsRounded_KeyPosition : undefined
    });

    return peptideSequenceDisplay
}