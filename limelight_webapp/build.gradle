/*
 * Web App
 *
 * This build file was Copied from https://spring.io/guides/gs/serving-web-content/.
 *
  	Task for building the war: 'build'
 */
 
 	
	//  http://ajoberstar.org/grgit/grgit-gradle.html
	// Grgit: Generally, you should only apply the plugin to the root project of your build.
	//  Plugin adds grgit property to your build, which is an instance of Grgit.
	//     Plugin looks for .git directory in build directory and it's parents
 
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.ajoberstar.grgit:grgit-gradle:3.1.1"
  }
}

plugins {
	id 'java'
	id 'war'
	id 'eclipse'
	id "org.springframework.boot" version "2.6.6"
	id "io.spring.dependency-management" version "1.0.11.RELEASE"
	//  moved to 'buildscript'. See Notes above	id 'org.ajoberstar.grgit' version '3.1.1'
}

apply plugin: "org.ajoberstar.grgit"
 

repositories {
	jcenter()
    mavenCentral()
    
    //  For Limelight Import API
    maven {
       url 'https://raw.github.com/yeastrc/limelight-import-api/repository/'
   }
}

//  Default Task
//    Comment out since creates infinite loop of building
//  defaultTasks 'build'

sourceCompatibility = 1.8     //  defaults to currently installed JVM
// targetCompatibility = 1.8  //  defaults to sourceCompatibility

configurations.all {
	//  Exclude default logger for Spring Boot 'logback'
   exclude group:"ch.qos.logback", module:"logback-core"
   exclude group:"ch.qos.logback", module:"logback-classic"
   	//  Exclude Routing of log4j to slf4j since using opposite (slf4j to log4j) and including this would create a circular reference
   exclude group:'org.apache.logging.log4j', module: 'log4j-to-slf4j'
//   exclude group:'org.apache.logging.log4j', module: 'log4j-api'
}



//  Build 'compile' string for 'org.yeastrc:limelight-import-api:###'

 String limelight_import_version = project.file('../Gradle_limelight-import-api_version_for_Gradle.txt').getText('UTF-8');

//   Prev used: String limelight_import_version = "#.#.#";
 
println("limelight_import_version: " + limelight_import_version);

String limelight_import = 'org.yeastrc:limelight-import-api:' + limelight_import_version;

println("compile for 'org.yeastrc:limelight-import-api': " + limelight_import);



dependencies {

	//  Limelight Import API Jar - Need to Update Version as needed
	
	//      Pulled from REPO (entered above): url 'https://raw.github.com/yeastrc/limelight-import-api/repository/'
	
	compile limelight_import


//  Specify dependency on Limelight Shared Code
	
	compile project(":limelight_shared_code")
	
//  Specify dependency on limelight_submit_import_client_connector to get Webservice Request and Response Java Classes
	
	compile project(":limelight_submit_import_client_connector")
	
	
	//  Mail
	
	// https://mvnrepository.com/artifact/javax.mail/mail
	compile group: 'javax.mail', name: 'mail', version: '1.4.1'
	
	//  Later versions like this have license CDDL and GPL
	// https://mvnrepository.com/artifact/javax.mail/javax.mail-api
//	compile group: 'javax.mail', name: 'javax.mail-api', version: '1.6.1'
	
	// https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2
	implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.9.0'
	
	// https://mvnrepository.com/artifact/mysql/mysql-connector-java
//	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.45'
	
	//  Logging
	
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.2'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'	
	implementation group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.17.2' //  Needed for Web app
	
	// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
	implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.17.2'
	
	//  Jakarta Commons Logging to SLF4J
	implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.36'
	
	//  Log4j 1 to 2 bridge
	implementation group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.17.2'
		
	
	
	//  redirects log4j to slf4j, the opposite of how logging is set up
	// https://mvnrepository.com/artifact/org.slf4j/log4j-over-slf4j
//	compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'
	
	// Used by included yeastrc jar password management
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto
	implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.6.2'

		
	// Used by included yeastrc jars
	// https://mvnrepository.com/artifact/com.google.guava/guava
	//  compile group: 'com.google.guava', name: 'guava', version: '24.0-jre'
	
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation group: 'com.google.guava', name: 'guava', version: '31.1-jre'
	
	// https://mvnrepository.com/artifact/javax.servlet/jstl
	compile group: 'javax.servlet', name: 'jstl', version: '1.2'

	
	//   Apache Commons
	
	//  Old StringUtils
	// https://mvnrepository.com/artifact/commons-lang/commons-lang
	compile group: 'commons-lang', name: 'commons-lang', version: '2.6'

	//  New StringUtils
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
	
	// https://mvnrepository.com/artifact/commons-io/commons-io
	implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
	
	// https://mvnrepository.com/artifact/org.apache.commons/commons-math3
	compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
	
	//   Apache HTPP Client

	// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

	// https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore
	implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.15'

	
	// JAXB dependencies (Required for Java 11+)
	// https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
	implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.3'
	// https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime
	implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.6'
	
	//  Other Limelight Jars
		
		
	//  Removed since pull the API jar another way
	//  Jars built from other Limelight Github repositories
	// compile fileTree(dir: '../libs_limelight_github_jars', include: ['*.jar'])
	
	//  Other Yeastrc Jars
	
	//  Jars built from other Yeastrc Github repositories
	compile fileTree(dir: '../libs_yeastrc_github_jars', include: ['*.jar'])

	//  Jars built from other Yeastrc Github repositories - Webapp only	
	compile fileTree(dir: 'libs_webapp__yeastrc_github_jars', include: ['*.jar'])
	
	
    // https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core
    providedCompile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '8.5.77'

    // https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
	providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
	
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.6.6'

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-configuration-processor
	implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.6.6'

	// https://mvnrepository.com/artifact/org.springframework/spring-jdbc
	implementation group: 'org.springframework', name: 'spring-jdbc', version: '5.3.18'
  
    //  Mark provided since creating a war
	providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
}


//  Moved to ant file 'ant_create_war.xml':  

//			execute  front_end:frontEndBuild

//  		delete   build/libs


//  These two things are moved to  ant file 'ant_create_war.xml'

//		since they no longer work as is in gradle with switch from version 5.4 to 6.9

/*
	Before the Gradle WAR processing creates the war, it runs task 'frontEndBuild' in front_end sub directory. 
	(':front_end:frontEndBuild')
	to build the front end.
	
	(have 'include "front_end"' in settings.gradle)
*/
//  processResources.dependsOn 'front_end:frontEndBuild'


/*
 * Before the Gradle WAR processing creates the war, it deletes the output .war file to ensure it is always re-created 
 */
// processResources.dependsOn 'deleteExistingBuiltWar'


/*
 * Before the Gradle WAR processing creates the war, it deletes the output .war file to ensure it is always re-created 
 */
/*
task deleteExistingBuiltWar(type: GradleBuild) {
 	doLast {
	  	println("Webapp Gradle build deleteExistingBuiltWar called - Before WAR created. Deletes the output .war file to ensure it is always re-created")
	  	
		delete "build/libs/"
	}
}
 */
 
/*
 * Before the Gradle WAR processing creates the war, it copies limelight_submit_import jar to the web app  
 */
processResources.dependsOn 'limelight_submit_import:shadowJar'

/*
 * Before the Gradle WAR processing creates the war, it copies limelight_submit_import jar to the web app  
 */
processResources.dependsOn 'copy_limelight_submit_import_ToWebapp'

/*
 * Before the Gradle WAR processing creates the war, it copies limelight_submit_import jar to the web app  
 */


task build_copy_limelight_submit_import_ToWebapp(type: GradleBuild) {

	dependsOn 'limelight_submit_import:shadowJar'
   tasks = [ 
     'copy_limelight_submit_import_ToWebapp', 
        ]
}
     
/*
 * Before the Gradle WAR processing creates the war, it copies limelight_submit_import jar to the web app  
*/
task copy_limelight_submit_import_ToWebapp(type: Sync) {
    from "../limelight_submit_import/build/libs/limelightSubmitImport.jar"
    // 'into' Must be a subdir of '/static/' that contains nothing else.  The directory contents will be deleted.
    into "src/main/webapp/static/limelightSubmitImport/" 
}


/*
 * Before the Gradle WAR processing creates the war, create file under WEB-INF with GIT Hash 
 */
processResources.dependsOn 'createFileGitHash'

// import org.ajoberstar.grgit.Grgit

/*
 * Before the Gradle WAR processing creates the war, it deletes the output .war file to ensure it is always re-created 
 */

task createFileGitHash(type: GradleBuild) {
  	doLast {
	  	println("Webapp Gradle build createFileGitHash doLast called - Before WAR created. Create file under WEB-INF with GIT Hash ")
		  	
		
		//  Assign to grgit, created by plugin
		def gitRepo = grgit
		
		
		// def gitRepo = Grgit.open({
		//  dir = ".."  //  Use parent directory since that is root of GIT repo
		//  currentDir = <path>
		//  credentials = <credentals>
		// })
		
		def gitHeadId = gitRepo.head().id
		def gitCommit = gitRepo.head().getAbbreviatedId(8)
		def gitBranch = gitRepo.branch.getCurrent().getName()
		
		//  Get tag at GIT HEAD: like git tag --points-at HEAD
		def repoHead = gitRepo.head()
		def repoHeadTag = gitRepo.tag.list().find {
			it.commit == repoHead
		}
		def repoTagName = "NO GIT Tag at HEAD"
		
		if ( repoHeadTag ) {
			println("GIT Tag at HEAD found")
			repoTagName = repoHeadTag.getName()
		}
		
		
		println("gitHeadId: " + gitHeadId )
		println("gitCommit: " + gitCommit )
		println("gitBranch: " + gitBranch )
		println("GIT Tag at HEAD: " + repoTagName )
		
		//  The filename 'limelight_version_from_build.properties' 
		//     is also in Java code org.yeastrc.limelight.limelight_webapp.constants_config_filenames. LimelightWebapp_BuildInfo_Incl_GitHash_Filename_Constants
		
		new File("$projectDir/src/main/resources/limelight_version_from_build.properties").text = """

#  Generated by the build

Project-Title=${project.name}
Branch=$gitBranch
GIT-HASH=${gitCommit}
GIT-Full-HASH=${gitHeadId}
GIT-Repo-Tag-Name=${repoTagName}
Buildtime=${new Date().format("yyyy-MM-dd HH:mm:ssZ")}
"""
	}
}

