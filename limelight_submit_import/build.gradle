/*
 * submit import 
 
 	Build Runnable Jar for Submitter
 
 		defaultTasks 'shadowJar'
 *
 */

/*
    Build executable jar file with gradle shadowJar
    More info at: https://imperceptiblethoughts.com/shadow/
    
    Requires Gradle 5+
 */
 
 //  Specify 'org.ajoberstar.grgit' the old way 
 //  so that limelight_submit_import build.gradle 
 //  can be run from limelight_webapp build.gradle
 //  when both import 'org.ajoberstar.grgit'

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.ajoberstar.grgit:grgit-gradle:3.1.1"
  }
}

plugins {
	id 'com.github.johnrengelman.shadow' version '5.0.0'
	//  moved to 'buildscript'. See Notes above	id 'org.ajoberstar.grgit' version '3.1.1'
}

apply plugin: 'java'

apply plugin: "org.ajoberstar.grgit"


sourceCompatibility = 1.8      //    defaults to currently installed JVM
// targetCompatibility  = 1.8  //    defaults to sourceCompatibility

repositories {
    mavenCentral()
    jcenter()
}

//  Set default task for this build.gradle file
defaultTasks 'shadowJar'


configurations.all {
	//  Exclude default logger for Spring Boot 'logback'
   exclude group:"ch.qos.logback", module:"logback-core"
   exclude group:"ch.qos.logback", module:"logback-classic"
   	//  Exclude Routing of log4j to slf4j since using opposite (slf4j to log4j) and including this would create a circular reference
   exclude group:'org.apache.logging.log4j', module: 'log4j-to-slf4j'
//   exclude group:'org.apache.logging.log4j', module: 'log4j-api'
}

dependencies {

//  Specify dependency on limelight_submit_import_client_connector to get Webservice Request and Response Java Classes
	
	compile project(":limelight_submit_import_client_connector")
	
	
    // This dependency is found on compile classpath of this component and consumers.
//	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
//	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'	

	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
		
	// https://mvnrepository.com/artifact/commons-io/commons-io
	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	
	
	//  Logging
	
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.0'	
	
	// https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
	compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.17.0'
	
	//  Jakarta Commons Logging to SLF4J
	compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
	
	//  Log4j 1 to 2 bridge
	compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.2'

	//  Required for dependent project within this repo 'limelight_submit_import_client_connector' 	

	// JAXB dependencies (Required for Java 11+)
	// https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
	implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.2'
	// https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime
	implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.2'
	
	//  NOT FOUND  either jcenter() or mavenCentral()
	
	//     Took Gradle listing from https://mvnrepository.com/artifact/jargs/jargs/1.0
    // https://mvnrepository.com/artifact/jargs/jargs
//	compile group: 'jargs', name: 'jargs', version: '1.0'

	//////////////////////////////
	
	//  Jars copied and placed here	
	compile fileTree(dir: '../lib_other', include: ['*.jar'])

}


//  Assign to grgit, created by plugin
def gitRepo = grgit


// def gitRepo = Grgit.open({
//  dir = ".."  //  Use parent directory since that is root of GIT repo
//  currentDir = <path>
//  credentials = <credentals>
// })

def gitHeadId = gitRepo.head().id
def gitCommit = gitRepo.head().getAbbreviatedId(8)
def gitBranch = gitRepo.branch.getCurrent().getName()

//  Get tag at GIT HEAD: like git tag --points-at HEAD
def repoHead = gitRepo.head()
def repoHeadTag = gitRepo.tag.list().find {
	it.commit == repoHead
}
def repoTagName = "NO GIT Tag at HEAD"

if ( repoHeadTag ) {
	println("GIT Tag at HEAD found")
	repoTagName = repoHeadTag.getName()
}


println("gitHeadId: " + gitHeadId )
println("gitCommit: " + gitCommit )
println("gitBranch: " + gitBranch )
println("GIT Tag at HEAD: " + repoTagName )

jar {
    manifest {
        attributes([ 'Main-Class': 'org.yeastrc.limelight.limelight_submit_import.program.SubmitImportProgram',
        			"Multi-Release": true,
         			'Project-Title': project.name,
					'Build-Timestamp': new Date().format("yyyy-MM-dd HH:mm:ssZ"),
					'Git-Commit': gitCommit,
					'GIT-Full-HASH': gitHeadId,
					'GIT-Tag-at-HEAD': repoTagName,
					'Git-Branch': gitBranch ])
    }
}

//  For creating runnable jar
processResources {
    from ('src/main/resources') {
        include '**/*'
    }
}

shadowJar {
    baseName = 'limelightSubmitImport'
    classifier = null
    version = null
}
