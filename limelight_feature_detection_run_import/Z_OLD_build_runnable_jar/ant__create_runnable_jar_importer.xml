<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="create_run_jar" name="Limelight Import XML pgm: Create Runnable Jar for Jar-in-Jar Loader">

	<property name="input_importer_zip_filename" value="limelight_importer.zip" />

<!--
	<property name="input_importer_zip_file_dir" value="/data/code_checkouts/Bitbucket_New/Yeastrc/Emozi_Project/Emozi_Main_Incubating/GIT_CLONE/emozi-main-incubating/importer/build/distributions" />

-->
	<property name="jar.main.class" value="org.yeastrc.limelight.limelight_importer.program.LimelightImporterProgram" />

	<property name="output_runnable_jar" value="limelightImporter_XMLFile_ScanFiles.jar"/>

    <property name="expand_zip" value="expand_zip" />
    <property name="expand_zip_jars_dir" value="${expand_zip}/limelight_importer/lib" />

<!--
    <property name="jar_db_config_file_dir" value="jar_db_config_file" />
    <property name="db_config_file_jar_filename" value="db_config_file_jar.jar" />
-->

    <property name="deploy" value="deploy" />
	
	<!-- config file 2 directories above -->
	
	<property name="config_file_importer" value="..${file.separator}..${file.separator}aa_ant__build_all_limelight_config.properties" />
	
	<property name="config_file_importer_with_path" 
		value="${config_file_importer}"/>

	<echo>Using Config file ${config_file_importer_with_path}</echo>
	
	<fail message="ERROR: '${config_file_importer}' file not found, check the path. filename with path: ${config_file_importer_with_path}">
		<condition>
		    <not>
		    	<available file="${config_file_importer_with_path}" />
		    </not>
		</condition>
	</fail>
	
	<echo>config_file_importer_with_path: ${config_file_importer_with_path}</echo>
	
	<!-- This does not fail if the file is not found -->
	<property file="${config_file_importer_with_path}" />
	
	
	<echo>gradle.wrapper.executable in file: ${gradle.wrapper.executable}</echo>
	

	<!-- Set Properties if not set in config -->
	<condition property="gradle.wrapper.executable" value="gradle">
	   <not>  
	      <isset property="gradle.wrapper.executable"/>
	   </not>
	</condition>

	<echo>gradle.wrapper.executable after default set if necessary: ${gradle.wrapper.executable}</echo>
	

  <target name="build_import_zip" >

	<exec executable="${gradle.wrapper.executable}" dir=".." failonerror="true" >
		<arg value="build" />
		<!--   <arg value="XXXX" /> -->
	</exec>
    </target>
	

  <target name="unzip_import_file" depends="build_import_zip" >

<!--
	<copy overwrite="true" file="${input_importer_zip_file_dir}/${input_importer_zip_filename}"  todir="Importer_Zip_File_From_Build_Goes_Here" />
-->	
    <unzip 
	src="../build/distributions/${input_importer_zip_filename}"
	dest="${expand_zip}"
	/>
  </target>

<!--
  <target name="jar_db_config_file_importer" >
	<jar destfile="${jar_db_config_file_importer_dir}/${db_config_file_importer_jar_filename}" basedir="db_connection_file" />

  </target>
-->	

    <target name="create_run_jar"  depends="clean,unzip_import_file"> <!-- ,jar_db_config_file_importer -->
    	
    	<!-- Add the jars in the 'expand_zip/limelight_importer/lib' folder to the class path   -->
    	
		<path id="build.classpath">
		  <fileset dir="${expand_zip_jars_dir}">
		    <include name="**/*.jar" />
		  </fileset>
		</path>

		<!-- convert classpath to a flat list/string for use in manifest task -->
		<pathconvert property="jars.classpath" pathsep=" ">
		    <path refid="build.classpath" />
		    <flattenmapper />
		</pathconvert>

    	<property name="final.classpath" value="./ ${jars.classpath} "/> <!-- ${db_config_file_importer_jar_filename}  -->
    	
    	
		<echo >Classpath for runnable jar ${final.classpath}</echo>
    	
    	
        <jar destfile="deploy/${output_runnable_jar}">

    	
            <manifest>
                <attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader"/>
                <attribute name="Rsrc-Main-Class" 
                		value="${jar.main.class}"/>
                <attribute name="Class-Path" value="."/>
                <attribute name="Rsrc-Class-Path" value="${final.classpath}"/>

<!--
            	<attribute name="GIT-last-tag-commit-hash" value="${git.last.tag.and.commit.hash}"/>
            	<attribute name="GIT-commit-hash" value="${git.last.commit.hash}"/>
    			
				<attribute name="Date" value="${build-info.current-date}" />
				<attribute name="Time" value="${build-info.current-time}" />
-->
            </manifest>
            <zipfileset src="jar-in-jar-loader.zip.class.files"/>
            <zipfileset dir="${expand_zip_jars_dir}" />
<!--
            <zipfileset dir="${jar_db_config_file_importer_dir}" />
-->
        </jar>

<!--
	<copy overwrite="true" file="deploy/${output_runnable_jar}"  todir=".." />
-->	
    </target>
	


	
	<!-- ================================================================================== -->
	<!-- Clean the build directory -->
	<!-- ================================================================================== -->
    <target name="clean" description="Prepare for clean build">

      <delete dir="${deploy}" />
      <mkdir  dir="${deploy}"/>

    	<delete dir="${expand_zip}"/>
    	<mkdir  dir="${expand_zip}"/>

<!--
    	<delete dir="${jar_db_config_file_importer_dir}"/>
    	<mkdir  dir="${jar_db_config_file_importer_dir}"/>
-->
    </target>
	
			
</project>

