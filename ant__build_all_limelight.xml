<?xml version="1.0" encoding="US-ASCII" ?>
<project name="Limelight_Root_Build_All_Limelight" default="createInstallables" basedir=".">

	<!--

	  Ant build to build everything for Limelight.

	  Run the default target to build everything.

	  If ant is installed and on the PATH,
	  enter on the command line   "ant -f  ant__build_all_limelight.xml"
	  in the base directory to build everything.

	  -->

	 <!-- Set program to run for Windows, else Non-Windows (Linux/Mac) -->
	    <condition property="gradleExecutableToRun_Root" value="./gradlew.bat" else="./gradlew">
	        <os family="windows"/>
	    </condition>
	

	<property name="config_file" value="aa_ant__build_all_limelight_config.properties" />
	
	<property name="config_file_with_path" 
		value="${config_file}"/>

	<echo>Using Config file ${config_file_with_path}</echo>
	
	<!-- 
		REMOVE since not needed.  npm will be set to default if no properties file
	
	<fail message="ERROR: '${config_file}' file not found, check the path. filename with path: ${config_file_with_path}">
		<condition>
		    <not>
		    	<available file="${config_file_with_path}" />
		    </not>
		</condition>
	</fail>
	-->
	
	<echo>config_file_with_path: ${config_file_with_path}</echo>
	
	<!-- This does not fail if the file is not found -->
	<property file="${config_file_with_path}" />
	
	<echo>Properties after read config file:</echo>
	<echo>npm.executable: ${npm.executable}</echo>
		

	<!-- Set Properties if not set in config -->
	<condition property="npm.executable" value="npm">
	   <not>  
	      <isset property="npm.executable"/>
	   </not>
	</condition>

	<echo>Properties after read config file and then set defaults:</echo>
	
	<echo>npm.executable: ${npm.executable}</echo>
		

	<!--  -->
	<target name="clean" >
		<delete dir="deploy" />
		
		<!-- Clean Front End -->
		<exec executable="${gradleExecutableToRun_Root}" dir="limelight_webapp/front_end" failonerror="true" 
		    resolveexecutable="true" >
		    <!--
		    resolveexecutable:
		    When this attribute is true, the name of the executable is resolved firstly against the project basedir 
		    and if that does not exist, against the execution directory if specified. 
		    On Unix systems, if you only want to allow execution of 
		    commands in the user's path, set this to false. since Ant 1.6
		    -->
			<!--  task 'clean' in front_end/build.gradle file -->
			<arg value="clean" /> 
		</exec>
		
	</target>

	<!-- Prepare depends on clean -->
	<target name="prepare" depends="clean">
		<mkdir dir="deploy" />
	</target>


	<!--
		npm install depends on prepare
		executes 'npm install' in the web app to populate 'node_modules' folder
	 -->
	<target name="npm_install" depends="prepare">

		<!--  web app - npm install  -->		
		<exec executable="${npm.executable}" dir="limelight_webapp/front_end" failonerror="true" >
			<arg value="install" />
			<!--   <arg value="XXXX" /> -->
		</exec>

		<!--  The Gradle task 'npm_install' in "proxl_web_app/front_end/build.gradle" does not work in Windows so execute npm directly here -->
		<!--
		<exec executable="${gradleExecutableToRun_Root}" dir="proxl_web_app/front_end" failonerror="true" 
		    resolveexecutable="true" >
			<arg value="npm_install" />
		</exec>
		-->		
	</target>
	
	<!--
		compileAllSubmodules depends on npm_install
		executes external builds for each sub project
	 -->
	<target name="compileAllSubmodules" depends="npm_install">

		<!--  Build submodules and create runnable jars -->
		
		<!--  limelight_feature_detection_run_import  -->
		<ant antfile="ant__create_runnable_jar_importer.xml"  dir="limelight_feature_detection_run_import" />

		<!--  importer  -->		
		<ant antfile="ant__create_runnable_jar_importer.xml"  dir="limelight_importer" />

		<!-- run importer  -->		
		<ant antfile="ant__create_runnable_jar_run_importer.xml"  dir="limelight_run_importer" />
		
		<!-- submit import  -->		
		<ant antfile="ant__create_runnable_jar_submit_import.xml"  dir="limelight_submit_import" />

		<!--  web app  -->		
		<ant antfile="ant_create_war.xml"  dir="limelight_webapp" />
				
	</target>
	

	<!--
		createInstallables depends on compileAllSubmodules
	-->
	<target name="createInstallables" depends="compileAllSubmodules">

		<!-- copy files from subdir 'deploy' to deploy -->
		<copy file="limelight_webapp/build/libs/limelight.war" todir="deploy" />
		<copy file="limelight_importer/build/libs/limelightImporter_XMLFile_ScanFiles.jar" todir="deploy" />
		<copy file="limelight_feature_detection_run_import/build/libs/limelight_FeatureDetection_Run_Import.jar" todir="deploy" />
		<copy file="limelight_run_importer/build/libs/limelightRunImporter.jar" todir="deploy" />
		<copy file="limelight_submit_import/build/libs/limelightSubmitImport.jar" todir="deploy" />
		
	</target>
	
</project>
